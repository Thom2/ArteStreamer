!function(e){"use strict";function d(e,o){var t=(65535&e)+(65535&o);return(e>>16)+(o>>16)+(t>>16)<<16|65535&t}function s(e,o,t,i,n,a){return d(function(e,o){return e<<o|e>>>32-o}(d(d(o,e),d(i,a)),n),t)}function p(e,o,t,i,n,a,r){return s(o&t|~o&i,e,o,n,a,r)}function m(e,o,t,i,n,a,r){return s(o&i|t&~i,e,o,n,a,r)}function g(e,o,t,i,n,a,r){return s(o^t^i,e,o,n,a,r)}function f(e,o,t,i,n,a,r){return s(t^(o|~i),e,o,n,a,r)}function l(e,o){var t,i,n,a,r;e[o>>5]|=128<<o%32,e[14+(o+64>>>9<<4)]=o;var s=1732584193,l=-271733879,c=-1732584194,u=271733878;for(t=0;t<e.length;t+=16)l=f(l=f(l=f(l=f(l=g(l=g(l=g(l=g(l=m(l=m(l=m(l=m(l=p(l=p(l=p(l=p(n=l,c=p(a=c,u=p(r=u,s=p(i=s,l,c,u,e[t],7,-680876936),l,c,e[t+1],12,-389564586),s,l,e[t+2],17,606105819),u,s,e[t+3],22,-1044525330),c=p(c,u=p(u,s=p(s,l,c,u,e[t+4],7,-176418897),l,c,e[t+5],12,1200080426),s,l,e[t+6],17,-1473231341),u,s,e[t+7],22,-45705983),c=p(c,u=p(u,s=p(s,l,c,u,e[t+8],7,1770035416),l,c,e[t+9],12,-1958414417),s,l,e[t+10],17,-42063),u,s,e[t+11],22,-1990404162),c=p(c,u=p(u,s=p(s,l,c,u,e[t+12],7,1804603682),l,c,e[t+13],12,-40341101),s,l,e[t+14],17,-1502002290),u,s,e[t+15],22,1236535329),c=m(c,u=m(u,s=m(s,l,c,u,e[t+1],5,-165796510),l,c,e[t+6],9,-1069501632),s,l,e[t+11],14,643717713),u,s,e[t],20,-373897302),c=m(c,u=m(u,s=m(s,l,c,u,e[t+5],5,-701558691),l,c,e[t+10],9,38016083),s,l,e[t+15],14,-660478335),u,s,e[t+4],20,-405537848),c=m(c,u=m(u,s=m(s,l,c,u,e[t+9],5,568446438),l,c,e[t+14],9,-1019803690),s,l,e[t+3],14,-187363961),u,s,e[t+8],20,1163531501),c=m(c,u=m(u,s=m(s,l,c,u,e[t+13],5,-1444681467),l,c,e[t+2],9,-51403784),s,l,e[t+7],14,1735328473),u,s,e[t+12],20,-1926607734),c=g(c,u=g(u,s=g(s,l,c,u,e[t+5],4,-378558),l,c,e[t+8],11,-2022574463),s,l,e[t+11],16,1839030562),u,s,e[t+14],23,-35309556),c=g(c,u=g(u,s=g(s,l,c,u,e[t+1],4,-1530992060),l,c,e[t+4],11,1272893353),s,l,e[t+7],16,-155497632),u,s,e[t+10],23,-1094730640),c=g(c,u=g(u,s=g(s,l,c,u,e[t+13],4,681279174),l,c,e[t],11,-358537222),s,l,e[t+3],16,-722521979),u,s,e[t+6],23,76029189),c=g(c,u=g(u,s=g(s,l,c,u,e[t+9],4,-640364487),l,c,e[t+12],11,-421815835),s,l,e[t+15],16,530742520),u,s,e[t+2],23,-995338651),c=f(c,u=f(u,s=f(s,l,c,u,e[t],6,-198630844),l,c,e[t+7],10,1126891415),s,l,e[t+14],15,-1416354905),u,s,e[t+5],21,-57434055),c=f(c,u=f(u,s=f(s,l,c,u,e[t+12],6,1700485571),l,c,e[t+3],10,-1894986606),s,l,e[t+10],15,-1051523),u,s,e[t+1],21,-2054922799),c=f(c,u=f(u,s=f(s,l,c,u,e[t+8],6,1873313359),l,c,e[t+15],10,-30611744),s,l,e[t+6],15,-1560198380),u,s,e[t+13],21,1309151649),c=f(c,u=f(u,s=f(s,l,c,u,e[t+4],6,-145523070),l,c,e[t+11],10,-1120210379),s,l,e[t+2],15,718787259),u,s,e[t+9],21,-343485551),s=d(s,i),l=d(l,n),c=d(c,a),u=d(u,r);return[s,l,c,u]}function c(e){var o,t="",i=32*e.length;for(o=0;o<i;o+=8)t+=String.fromCharCode(e[o>>5]>>>o%32&255);return t}function u(e){var o,t=[];for(t[(e.length>>2)-1]=void 0,o=0;o<t.length;o+=1)t[o]=0;var i=8*e.length;for(o=0;o<i;o+=8)t[o>>5]|=(255&e.charCodeAt(o/8))<<o%32;return t}function i(e){var o,t,i="0123456789abcdef",n="";for(t=0;t<e.length;t+=1)o=e.charCodeAt(t),n+=i.charAt(o>>>4&15)+i.charAt(15&o);return n}function t(e){return unescape(encodeURIComponent(e))}function n(e){return function(e){return c(l(u(e),8*e.length))}(t(e))}function a(e,o){return function(e,o){var t,i,n=u(e),a=[],r=[];for(a[15]=r[15]=void 0,16<n.length&&(n=l(n,8*e.length)),t=0;t<16;t+=1)a[t]=909522486^n[t],r[t]=1549556828^n[t];return i=l(a.concat(u(o)),512+8*o.length),c(l(r.concat(i),640))}(t(e),t(o))}e.md5=function(e,o,t){return o?t?a(o,e):function(e,o){return i(a(e,o))}(o,e):t?n(e):function(e){return i(n(e))}(e)}}(this),function(e,o,u){function s(e){}function t(e,o,t){for(this.callback=t||s,this.errors=[],this.fields={},this.form=this._formByNameOrNode(e)||{},this.messages={},this.handlers={},e=0,t=o.length;e<t;e++){var i=o[e];if((i.name||i.names)&&i.rules)if(i.names)for(var n=0;n<i.names.length;n++)this._addField(i,i.names[n]);else this._addField(i,i.name)}var a,r=this.form.onsubmit;this.form.onsubmit=(a=this,function(e){try{return a._validateForm(e)&&(r===u||r())}catch(e){}})}function n(e,o){var t;if(!(0<e.length)||"radio"!==e[0].type&&"checkbox"!==e[0].type)return e[o];for(t=0;t<e.length;t++)if(e[t].checked)return e[t][o]}var d={required:"The %s field is required.",valid_phoneno:"The %s field is not valid.",matches:"The %s field does not match the %s field.",default:"The %s field is still set to default, please change.",valid_email:"The %s field must contain a valid email address.",valid_emails:"The %s field must contain all valid email addresses.",min_length:"The %s field must be at least %s characters in length.",max_length:"The %s field must not exceed %s characters in length.",exact_length:"The %s field must be exactly %s characters in length.",greater_than:"The %s field must contain a number greater than %s.",less_than:"The %s field must contain a number less than %s.",alpha:"The %s field must only contain alphabetical characters.",alpha_numeric:"The %s field must only contain alpha-numeric characters.",alpha_dash:"The %s field must only contain alpha-numeric characters, underscores, and dashes.",alpha_numeric_dash_combo:"The %s field must contain only combination of alpha-numeric characters and dashes.",alphanumeric_combo:"The %s field must contain only combination of alpha-numeric characters.",numeric:"The %s field must contain only numbers.",integer:"The %s field must contain an integer.",decimal:"The %s field must contain a decimal number.",is_natural:"The %s field must contain only positive numbers.",is_natural_no_zero:"The %s field must contain a number greater than zero.",valid_ip:"The %s field must contain a valid IP.",valid_base64:"The %s field must contain a base64 string.",valid_credit_card:"The %s field must contain a valid credit card number.",is_file_type:"The %s field must contain only %s files.",valid_url:"The %s field must contain a valid URL.",valid_ca_zip:"The %s field must contain a valid Postal Code."},i=/^[ABCEGHJKLMNPRSTVXY]{1}\d{1}[A-Z]{1} *\d{1}[A-Z]{1}\d{1}$/,a=/^(\\+)|(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{1,14}$/,p=/^(.+?)\[(.+)\]$/,r=/^[0-9]+$/,l=/^(?=.*[a-zA-Z])(?=.*\d)(?=.*[-])[A-Za-z\d][A-Za-z\d-]+$/i,c=/^(?=.*[0-9])(?=.*[a-zA-Z])([a-zA-Z0-9]+)$/,m=/^\-?[0-9]+$/,g=/^\-?[0-9]*\.?[0-9]+$/,f=/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,h=/^[a-z]+$/i,v=/^[a-z0-9]+$/i,y=/^[a-z0-9_\-]+$/i,w=/^[0-9]+$/i,k=/^[1-9][0-9]*$/i,C=/^((25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})\.){3}(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[0-9]{1,2})$/i,L=/[^a-zA-Z0-9\/\+=]/i,T=/^[\d\-\s]+$/,S=/^((http|https):\/\/(\w+:{0,1}\w*@)?(\S+)|)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?$/;t.prototype.setMessage=function(e,o){return this.messages[e]=o,this},t.prototype.registerCallback=function(e,o){return e&&"string"==typeof e&&o&&"function"==typeof o&&(this.handlers[e]=o),this},t.prototype._formByNameOrNode=function(e){return"object"==typeof e?e:o.forms[e]},t.prototype._addField=function(e,o){this.fields[o]={name:o,display:e.display||o,rules:e.rules,id:null,type:null,value:null,checked:null}},t.prototype._validateForm=function(e){for(var o in this.errors=[],this.fields)if(this.fields.hasOwnProperty(o)){var t=this.fields[o]||{},i=this.form[t.name];i&&i!==u&&(t.id=n(i,"id"),t.type=0<i.length?i[0].type:i.type,t.value=n(i,"value"),t.checked=n(i,"checked"),this._validateField(t))}return"function"==typeof this.callback&&this.callback(this.errors,e),0<this.errors.length&&(e&&e.preventDefault?e.preventDefault():event&&(event.returnValue=!1)),!0},t.prototype._validateField=function(e){for(var o=e.rules.split("|"),t=e.rules.indexOf("required"),i=!e.value||""===e.value||e.value===u,n=0,a=o.length;n<a;n++){var r=o[n],s=null,l=!1,c=p.exec(r);if((-1!==t||-1!==r.indexOf("!callback_")||!i)&&(c&&(r=c[1],s=c[2]),"!"===r.charAt(0)&&(r=r.substring(1,r.length)),"function"==typeof this._hooks[r]?this._hooks[r].apply(this,[e,s])||(l=!0):"callback_"===r.substring(0,9)&&(r=r.substring(9,r.length),"function"==typeof this.handlers[r]&&!1===this.handlers[r].apply(this,[e.value,s])&&(l=!0)),l)){o=this.messages[r+"#"+e.name]||this.messages[r]||d[r],t="An error has occurred with the "+e.display+" field.",o&&(t=o.replace("%s",e.display),s&&((cu=0<=s.indexOf("###")&&s.split("###"))?cu[1]&&(t=cu[1]):t=t.replace("%s",this.fields[s]?this.fields[s].display:s))),this.errors.push({Id:e.id,Name:e.name,Message:t,Rule:r});break}}},t.prototype._hooks={required:function(e){var o=e.value.trim();return"checkbox"===e.type||"radio"===e.type?!0===e.checked:null!==o&&""!==o},default:function(e,o){return e.value!==o},matches:function(e,o){var t=this.form[o];return!!t&&e.value===t.value},valid_ca_zip:function(e){return i.test(e.value)},valid_email:function(e){return f.test(e.value)},valid_emails:function(e){e=e.value.split(",");for(var o=0;o<e.length;o++)if(!f.test(e[o]))return!1;return!0},min_length:function(e,o){return!!r.test(o)&&e.value.length>=parseInt(o,10)},max_length:function(e,o){return!!r.test(o)&&e.value.length<=parseInt(o,10)},exact_length:function(e,o){return!!r.test(o)&&e.value.length===parseInt(o,10)},greater_than:function(e,o){return!!g.test(e.value)&&parseFloat(e.value)>parseFloat(o)},less_than:function(e,o){return!!g.test(e.value)&&parseFloat(e.value)<parseFloat(o)},alpha:function(e){return h.test(e.value)},alpha_numeric:function(e){return v.test(e.value)},alpha_dash:function(e){return y.test(e.value)},alpha_numeric_dash_combo:function(e){return l.test(e.value)},alphanumeric_combo:function(e){return c.test(e.value)},numeric:function(e){return r.test(e.value)},integer:function(e){return m.test(e.value)},decimal:function(e){return g.test(e.value)},is_natural:function(e){return w.test(e.value)},is_natural_no_zero:function(e){return k.test(e.value)},valid_ip:function(e){return C.test(e.value)},valid_phoneno:function(e){return a.test(e.value)},valid_base64:function(e){return L.test(e.value)},valid_url:function(e){return S.test(e.value)},valid_credit_card:function(e){if(!T.test(e.value))return!1;for(var o=0,t=0,i=!1,n=(e=e.value.replace(/\D/g,"")).length-1;0<=n;n--)t=e.charAt(n),t=parseInt(t,10),i&&9<(t*=2)&&(t-=9),o+=t,i=!i;return 0==o%10},is_file_type:function(e,o){if("file"!==e.type)return!0;for(var t=e.value.substr(e.value.lastIndexOf(".")+1),i=o.split(","),n=!1,a=0,r=i.length;a<r;a++)t==i[a]&&(n=!0);return n}},e.FormValidator=t}(window,document);var LRNameSpace={};!function(n){n.Storage=function(i,t){return{isLocalStorageNameSupported:function(e){if(!window[e])return!1;var o=window[e];try{return o.setItem("test","1"),o.removeItem("test"),!0}catch(e){return!1}},setBrowserStorage:function(e,o){var t=!0;this.isLocalStorageNameSupported("localStorage")&&(localStorage.setItem(e,o),t=!1),this.isLocalStorageNameSupported("sessionStorage")&&(sessionStorage.setItem(e,o),t=!1),t&&i&&i.options&&n.cookies.setItem(e,o,"",i.options.appPath)},getBrowserStorage:function(e){if(t&&e===t.storedTokenName){var o=this.getBrowserStorage("lr-session-token");if(o)return o=o.replace(/"/g,""),this.setBrowserStorage(t.storedTokenName,o),o}return this.isLocalStorageNameSupported("localStorage")&&null!==localStorage.getItem(e)&&void 0!==localStorage.getItem(e)&&""!==localStorage.getItem(e)?localStorage.getItem(e):this.isLocalStorageNameSupported("sessionStorage")&&null!==sessionStorage.getItem(e)&&void 0!==sessionStorage.getItem(e)&&""!==sessionStorage.getItem(e)?sessionStorage.getItem(e):n.cookies.getItem(e)},removeBrowserStorage:function(e){var o=!0;this.isLocalStorageNameSupported("localStorage")&&(localStorage.removeItem(e),o=!1),this.isLocalStorageNameSupported("sessionStorage")&&(sessionStorage.removeItem(e),o=!1),o&&i&&i.options&&n.cookies.removeItem(e,i.options.appPath)}}}}(LRNameSpace),LRNameSpace.cookies={getItem:function(e){return e&&decodeURIComponent(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*"+encodeURIComponent(e).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=\\s*([^;]*).*$)|^.*$"),"$1"))||null},setItem:function(e,o,t,i,n,a){if(!e||/^(?:expires|max\-age|path|domain|secure)$/i.test(e))return!1;var r="",s=function(e){if(e===1/0)return"Fri, 31 Dec 9999 23:59:59 GMT";var o=new Date;return o.setTime(o.getTime()+1e3*e),o.toGMTString()};if(t)switch(t.constructor){case Number:r="; expires="+s(t)+t===1/0?"":"; max-age="+t;break;case String:r="; expires="+t;break;case Date:r="; expires="+t.toUTCString()}return document.cookie=encodeURIComponent(e)+"="+encodeURIComponent(o)+r+(n?"; domain="+n:"")+(i?"; path="+i:"")+(a?"; secure":""),!0},removeItem:function(e,o,t){return!!this.hasItem(e)&&(document.cookie=encodeURIComponent(e)+"=; expires=Thu, 01 Jan 1970 00:00:00 GMT"+(t?"; domain="+t:"")+(o?"; path="+o:""),!0)},hasItem:function(e){return!!e&&new RegExp("(?:^|;\\s*)"+encodeURIComponent(e).replace(/[\-\.\+\*]/g,"\\$&")+"\\s*\\=").test(document.cookie)},keys:function(){for(var e=document.cookie.replace(/((?:^|\s*;)[^\=]+)(?=;|$)|^\s*|\s*(?:\=[^;]*)?(?:\1|$)/g,"").split(/\s*(?:\=[^;]*)?;\s*/),o=e.length,t=0;t<o;t++)e[t]=decodeURIComponent(e[t]);return e}},function(w){w.LRAnonymous=function(){var e,o,t=new w.Storage,i="__aasauid",n="__aasurl",a="_aasuid",r=!1,c=document.title||null,u=window.navigator.userLanguage||window.navigator.language,d=document.characterSet||document.charset,s=new Date,l=new Date(s.getYear()+1,s.getMonth()+1,s.getDay()+1),p="",m="",g="",f="";if(t.getBrowserStorage(a))m=t.getBrowserStorage(a);else if(t.getBrowserStorage("lr-user-uid")){r=!0;var h=t.getBrowserStorage("lr-user-uid");m=h,t.setBrowserStorage(a,h,l)}function v(){return(65536*(1+Math.random())|0).toString(16).substring(1)}t.getBrowserStorage(i)?p=t.getBrowserStorage(i):(o=e||"-",p=v()+v()+o+v()+o+v()+o+v()+o+v()+v()+v(),t.setBrowserStorage(i,p,l));function y(e,o,t,i){var n="";i&&(n=function(o){return Object.keys(o).map(function(e){if(o[e])return encodeURIComponent(e)+"="+encodeURIComponent(o[e])}).join("&")}(i)),f=t||f,m=o||m;var a,r,s=0;window.screen&&(a=window.screen.height,r=window.screen.width,s=window.screen.colorDepth);var l=new Image;l.style.position="fixed",l.onload=function(){document.body&&document.body.appendChild(l)},l.src="//gaugeapp.lrcontent.com/image.gif?aassite="+g+"&aasauid="+p+"&aasuid="+m+"&aasurl="+window.location.href+"&aassh="+a+"&aassw="+r+"&aasscd="+s+"&aashn="+window.location.hostname+"&aaspt="+c+"&aasln="+u+"&aasenc="+d+"&aasev="+e+"&aasidprov="+f+"&"+n}return{track:function(e,o,t,i){this.setUid(o),y(e,o,t,i)},setUid:function(e){m=e,t.setBrowserStorage(a,m,l)},init:function(e){m=(e=e||{}).uid||m,g=e.appName||e.appname,m&&t.setBrowserStorage(a,m,l),t.getBrowserStorage(n)&&t.getBrowserStorage(n)===md5(window.location.href)&&!r||(y("pageView"),t.setBrowserStorage(n,md5(window.location.href),l))}}}}(LRNameSpace),LRNameSpace.Utilities=function(){var e=navigator.userAgent.toLowerCase(),o={version:(e.match(/.+(?:rv|it|ra|ie)[\/: ]([\d.]+)/)||[])[1],safari:/webkit/.test(e),opera:/opera/.test(e),msie:(/msie/.test(e)||/trident/.test(e))&&!/opera/.test(e),mozilla:/mozilla/.test(e)&&!/(compatible|webkit)/.test(e)},t=!1,n=!1,i=[];function a(){if(!n&&(n=!0,i)){for(var e=0;e<i.length;e++)i[e].call(window,[]);i=[]}}function r(){var i;t||(t=!0,document.addEventListener&&!o.opera&&document.addEventListener("DOMContentLoaded",a,!1),o.msie&&window===top&&function(){if(!n){try{document.documentElement.doScroll("left")}catch(e){return}a()}}(),o.opera&&document.addEventListener("DOMContentLoaded",function(){if(!n){for(var e=0;e<document.styleSheets.length;e++)if(document.styleSheets[e].disabled)return;a()}},!1),o.safari&&function(){if(!n&&("loaded"===document.readyState||"complete"===document.readyState)){if(void 0===i){for(var e=document.getElementsByTagName("link"),o=0;o<e.length;o++)"stylesheet"===e[o].getAttribute("rel")&&i++;var t=document.getElementsByTagName("style");i+=t.length}document.styleSheets.length===i&&a()}}(),function(e){var o=window.onload;"function"!=typeof window.onload?window.onload=e:window.onload=function(){o&&o(),e()}}(a))}return{browser:o,getHashParam:function(e){var o=window.location.hash.match(new RegExp(e+"=([^&]*)"));return window.location.hash&&null!=o?o[1]:this.getQueryParameterByName(e)},keysToLowerCase:function(e){for(var o,t=Object.keys(e),i=t.length,n={};i--;)n[(o=t[i]).toLowerCase()]=e[o],"object"==typeof n[o.toLowerCase()]&&null!=n[o.toLowerCase()]&&(n[o.toLowerCase()]=this.keysToLowerCase(n[o.toLowerCase()]));return n},elementsByClass:function(e,o){if(""!==e){o=o||document.body;for(var t=[],i=new RegExp("(^| )"+e+"( |$)"),n=o.getElementsByTagName("*"),a=0,r=n.length;a<r;a++)i.test(n[a].className)&&t.push(n[a]);return t}},isValidUrl:function(e){return!!/^(?:(?:https?|ftp):\/\/)(?:\S+(?::\S*)?@)?(?:(?!10(?:\.\d{1,3}){3})(?!127(?:\.\d{1,3}){3})(?!169\.254(?:\.\d{1,3}){2})(?!192\.168(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})))(?::\d{2,5})?(?:\/[^\s]*)?$/i.test(e)},hasClass:function(e,o){return e.className.match(new RegExp("(\\s|^)"+o+"(\\s|$)"))},addclass:function(e,o){return!this.hasClass(e,o)&&(e.className+=" "+o,!0)},isSubstring:function(e,o){for(var t in o)if(-1!==o[t].indexOf(e))return t;return!1},isJsonString:function(e){try{return JSON.parse(e)}catch(e){return!1}},addEvent:function(e,o,t){var i=[];o instanceof Array?i=o:i.push(o);for(var n=0;n<i.length;n++)i[n]["on"+e]=t},getQueryParameterByName:function(e,o){o="&"+(o||location.search),e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var t=new RegExp("[\\?&]"+e+"=([^&#]*)").exec(o);return null==t?null:decodeURIComponent(t[1].replace(/\+/g," "))},getParameterByName:function(e){e=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]");var o=new RegExp("[\\?&]"+e+"=([^&#]*)").exec(location.search);return null===o?"":decodeURIComponent(o[1].replace(/\+/g," "))},getQueryStringValue:function(e,o){var t=e||window.location.href,i=new RegExp("[?&]"+o+"=([^&#]*)","i").exec(t);return i?i[1]:null},extend:function(e,o){for(var t in o)o.hasOwnProperty(t)&&(e[t]=o[t])},ready:function(e,o){r(),n?e.call(window,[]):i.push(function(){return e.call(window,[])})},parseQueryString:function(e){var o={};if((e||""!==e)&&"string"==typeof e)for(var t=e.split("&"),i=0;i<t.length;i++){var n=t[i].split("=");o[decodeURIComponent(n[0])]=decodeURIComponent(n[1])}return o},encodedString:function(e){return-1===e.indexOf("%2B")&&(e=e.replace(/\+/g,"%2B")),e},mergeOptions:function(e,o){var t={};for(var i in e)t[i]=e[i];for(var n in o)t[n]=o[n];return t},mergeObjects:function(e,o,t){var i,n=[];for(var a in e){for(var r in o)i=t?o[r]===e[a]:o[r].name===e[a].name;if(i)break;n.push(e[a])}return n=n.concat(o)},isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},randomString:function(e){var o="0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz".split("");e=e||Math.floor(Math.random()*o.length);for(var t="",i=0;i<e;i++)t+=o[Math.floor(Math.random()*o.length)];return t},findInSchema:function(e,o,t,i){for(var n=0;n<e.length;n++)if((i?e[n]&&e[n][o].toLowerCase():e[n]&&e[n][o])===t)return e[n];return null},jsonToQueryString:function(o){return Object.keys(o).map(function(e){return o[e]?encodeURIComponent(e)+"="+encodeURIComponent(o[e]):""}).join("&")},insertBefore:function(e,o){o.parentNode.insertBefore(e,o)},isEmpty:function(e){for(var o in e)if(e.hasOwnProperty(o))return!1;return!0},keyslowerToUpperCamelCase:function(e){for(var o,t=Object.keys(e),i=t.length,n={};i--;)n[(o=t[i]).charAt(0).toUpperCase()+o.substr(1)]=e[o];return n},findElementByRegex:function(e,o,t){var i;i=t?document.querySelectorAll(t):document.querySelectorAll("*");for(var n=[],a=0;a<i.length;a++)o.test(i[a][e])&&n.push(i[a]);return n},isObject:function(e){return e instanceof Object&&e.constructor===Object}}},LRNameSpace.ProgressiveProfiling=function(v,y,w,k){return{fetchSchema:function(e){v.util.ajaxCall("get",k.configApiDomain+"progressiveProfilingSchema?apikey="+v.options.apiKey+"&appName="+v.options.appName,"",e)},execStep:function(u,e){if(v.progressiveProfilingSchema){var d=e.onSuccess||function(){},p=e.onError||function(){},m=e.container||"",g=e.classPrefix||"",f=e.templateName||"",h=v.storage.getBrowserStorage(k.storedTokenName);h&&v.util.ajaxCall("get",k.apiDomain+"/auth/socialidentity?apiKey="+v.options.apiKey+"&access_token="+h,"",function(e){var o=v.util.findInSchema(v.progressiveProfilingSchema.ProfilingSteps,"Step",u);if(o){var t={};t.Profile=e,t.access_token=h;var i=e.Provider.toLowerCase();if("email"===i||"raas"===i||v.options.progressiveProfilingTraditional){v.options.progressiveProfilingTraditional&&"email"!==i&&"raas"!==i&&(e=v.LoggedinSocialProvderProfile);var n=o.Schema,a=y.mapSchema(n,e,null,!0);t.Profile=e,0<a.length?y.createForm(a,"progressiveProfiling",m,function(e){w.updateData(t,m,e,d,p,g,a,"progressiveProfiling")},function(e){p(e)},g):y.loginHandleToken(t,"",d,p)}else{var r=o.Scopes,s=v.util.findInSchema(r,"Provider",i,!0);if(s){var l="https://"+(v.options.customDomain||v.options.appName+"."+k.hubDomain)+"/RequestHandlor.aspx?apikey="+v.options.apiKey+"&provider="+i+"&scope="+s.Scopes,c=[];c.push({Name:i,Endpoint:l}),y.renderCustomInterface(m,"",f,"","",c),y.socialLogin(m,d,p)}else y.loginHandleToken(t,"",d,p)}}else v.log("Step Schema not found.")})}}}},"function"!=typeof String.prototype.trim&&(String.prototype.trim=function(){return this.replace(/^\s+|\s+$/g,"")}),Array.prototype.indexOf||(Array.prototype.indexOf=function(e){var o=this.length>>>0,t=Number(arguments[1])||0;for((t=t<0?Math.ceil(t):Math.floor(t))<0&&(t+=o);t<o;t++)if(t in this&&this[t]===e)return t;return-1}),Array.prototype.filter||(Array.prototype.filter=function(e){"use strict";if(null==this)throw new TypeError;var o=Object(this),t=o.length>>>0;if("function"!=typeof e)throw new TypeError;for(var i=[],n=arguments[1],a=0;a<t;a++)if(a in o){var r=o[a];e.call(n,r,a,o)&&i.push(r)}return i}),function(n){"use strict";var e={get:function(e){var o=i();return e?o[e]:o},add:function(e){var o=i();for(var t in e)o[t]=e[t];a(o)},remove:function(e){e="string"==typeof e?[e]:e;for(var o=i(),t=0;t<e.length;t++)delete o[e[t]];a(o)},clear:function(){a({})}};function i(){for(var e=n.location.hash?n.location.hash.substr(1).split("&"):[],o={},t=0;t<e.length;t++){var i=e[t].split("=");o[i[0]]=decodeURIComponent(i[1])}return o}function a(e){var o=[];for(var t in e)o.push(t+"="+encodeURIComponent(e[t]));n.location.hash=o.join("&")}n.hash=e}(window),"function"!=typeof Object.assign&&Object.defineProperty(Object,"assign",{value:function(e,o){"use strict";if(null==e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),i=1;i<arguments.length;i++){var n=arguments[i];if(null!=n)for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(t[a]=n[a])}return t},writable:!0,configurable:!0});var LoginRadiusDefaults={idPrefix:"loginradius-",classPrefix:"loginradius-",apiDomain:"https://api.loginradius.com/identity/v2",hubDomain:"hub.loginradius.com",cloudApiDomain:"https://cloud-api.loginradius.com/",configApiDomain:"https://config.lrcontent.com/ciam/",socialApiDomain:"https://api.loginradius.com/api/v2/",isRegFormSchemaLock:!1,isSecurityFormSchemaLock:!1,innerHTML:!1,autoFilledFieldforPasswordLesLogin:!1,socialRegFormId:"",lrResponseCounter:0,LRPhoneNo:"",lrCounterJwtResponse:"",lrCounterTokenResponse:"",storedTokenName:"LRTokenKey",storedTwoFAToken:"lr2fatok",storedOTPAuth:"lrotpauthver",storedGAAuth:"lrgaauthver",storedUidName:"lr-user-uid",tokenCookie:"lr-user--token",isSSOInitFired:!1,pingCount:1,messages:{tokenValid:{Message:"Access token is not valid",Description:"LoginRadius Access Token is invalid, please verify the authentication response",ErrorCode:905},twofaTokenValid:{Message:"Token is not valid",Description:"Your session is not valid."},invalidEmail:{Message:"Invalid Email",Description:"The email entered is not a valid email."},invalidPhone:{Message:"Invalid Phone",Description:"The mobile number entered is not valid."},disabledAccountLinking:"Account Linking disabled in your account",noSecurityQuestions:"There are no security questions for this application",invalidSott:"Something went wrong, please try again.",notValidMessage:"Error Message element not valid",passwordStrengthMessage:"Password strength meter configuration is not valid.",otpSent:"OTP Sent Successfully",vTokenError:{Message:"Verification token not found in query string."},notFound:"Data not found.",emailNotVerified:{Message:"The email is not verified, please verify the link in your email",Description:"The email is not verified, please verify the link in your email",ErrorCode:970},phoneNotVerified:{Message:"Phone number is not verified",Description:"The provided phone number is not verified, please use a verified phone number for login.",ErrorCode:1066},blockedUser:{Message:"User is blocked",Description:"This user is blocked by site admin",ErrorCode:991},unverifiedUser:{Message:"This Uid have only traditional unverified account",Description:"This Uid have only traditional unverified account",ErrorCode:1028}},buttonNames:{login:"Login",socialregistration:"Login",loginrequiredfieldsupdate:"Login",registration:"Register",verifyemail:"Verify",resetpassword:"Reset Password",sociallogin:"Login",otp:"Verify",twofaotp:"Verify",showqrcode:"Verify",updatephone:"Update",changephone:"Update",forgotpassword:"Send",securityquestions:"Get",changepassword:"Submit",resendemailverification:"Send",addemail:"Send",removeemail:"Send",changeusername:"Submit",profileeditor:"Update Profile",otplogin:"OTP",passwordlessloginbuttonlabel:"Email me a link to Sign In",passwordlessloginotpbuttonlabel:"Send an OTP to Sign In",createtwofactorauthentication:"2-Step Verification",sendotp:"Send OTP",resendotp:"Resend OTP",changenumber:"Change Number",backupcode:"Login",backupcodebutton:"Try another way to Sign In",backupcodebackbutton:"Back",disablegoogleauthenticator:"Disable Google Authenticator",disableotpauthenticator:"Disable OTP Authenticator",updatesecurityquestion:"Update Security Question",resetpwdbysecq:"Reset Password By SecurityQ",smartlogin:"Smart Login",validatecode:"Validate",onetouchlogin:"Login",progressiveprofiling:"Progressive Profiling",privacypolicyupdate:"Accept",updatephone2fa:"Update"},options:{passwordlessLoginEmailTemplate:"",callbackUrl:window.location,callbackInsideSameWindow:"",callbackType:"",scope:"",loginUrl:"",deleteUrl:"",emailTemplate:"",verificationUrl:"",verificationEmailTemplate:"",resetPasswordEmailTemplate:"",resetPasswordConfirmationEmailTemplate:"",smartLoginRedirectUrl:"",autoLoginRedirectUrl:"",smartLoginEmailTemplate:"",autoLoginEmailTemplate:"",smsTemplate2FA:"",smsTemplateForgot:"",smsTemplateWelcome:"",smsTemplateOneTouchLoginWelcome:"",smsTemplateOneTouchLogin:"",passwordlessLoginSMSTemplate:"",smsTemplate2FAWelcome:"",smsTemplatePhoneVerification:"",smsTemplateUpdatePhone:"",welcomeEmailTemplate:"",onetouchLoginEmailTemplate:"",onetouchLoginRedirectUrl:"",resetPasswordUrl:"",templateName:"",debugMode:!1,tokenType:"lrtoken",integrationName:"",smartLoginPingCount:100,smartLoginPingInterval:5,maskSensitiveInput:!1,enableHeaderSott:!0,accessTokenResponse:!0,rbaOneclickEmailTemplate:"",rbaOTPSmsTemplate:"",rbaCityEmailTemplate:"",rbaCountryEmailTemplate:"",rbaBrowserEmailTemplate:"",rbaIpEmailTemplate:"",rbaCitySmsTemplate:"",rbaCountrySmsTemplate:"",rbaBrowserSmsTemplate:"",rbaIpSmsTemplate:"",setLRSession:!1,askOptionalFieldsOnProgressiveSteps:!0},regexExpression:{emailRegex:/^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,phoneRegex:/^(\\+)|(9[976]\d|8[987530]\d|6[987]\d|5[90]\d|42\d|3[875]\d|2[98654321]\d|9[8543210]|8[6421]|6[6543210]|5[87654321]|4[987654310]|3[9643210]|2[70]|7|1)\d{8,14}$/},_uuidFormat:/^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i};function LoginRadiusUtility(v,y){var d=LoginRadiusDefaults.buttonNames,w=new LRNameSpace.Utilities,p=this;p.elementById=function(e,o){var t=document.getElementById(e);if(t)return t;o||v.log("Unable to find id: "+e)},p.getThisObjectName=function(){for(var e in v.global)if("frameElement"!==e&&"webkitStorageInfo"!==e&&"webkitIndexedDB"!==e&&v.global[e]===v)return e},p.serialize=function(e){if(e&&"FORM"===e.nodeName){var o,t,i=[];for(o=e.elements.length-1;0<=o;o-=1)if(""!==e.elements[o].name&&""!==e.elements[o].value.trim())switch("emailid"!==e.elements[o].name||v.options.usernameLogin||v.options.duplicateEmailWithUniqueUsername||(e.elements[o].value=e.elements[o].value.toLowerCase()),e.elements[o].nodeName){case"INPUT":switch(e.elements[o].type){case"text":case"hidden":case"button":case"reset":case"submit":case"email":var n=e.elements[o].name;"emailid"===n&&(n="email"),e.elements[o].disabled||i.push(n+"="+encodeURIComponent(e.elements[o].value.trim()));break;case"password":i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].value));break;case"checkbox":i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].checked));break;case"radio":e.elements[o].checked&&i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].value))}break;case"TEXTAREA":i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].value.trim()));break;case"SELECT":switch(e.elements[o].type){case"select-one":i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].value.trim()));break;case"select-multiple":for(t=e.elements[o].options.length-1;0<=t;t-=1)e.elements[o].options[t].selected&&i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].options[t].value.trim()))}break;case"BUTTON":switch(e.elements[o].type){case"reset":case"submit":case"button":i.push(e.elements[o].name+"="+encodeURIComponent(e.elements[o].value.trim()))}}return i.join("&")}},p.addJs=function(e,o){var t=(o=o||document).getElementsByTagName("head")[0],i=o.createElement("script");return i.src=e,i.type="text/javascript",t.appendChild(i),i},p.hashTmpl=function e(o,t){var i=/\W/.test(o)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+o.replace(/[\r\t\n]/g," ").split("<#").join("\t").replace(/((^|#>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)#>/g,"',$1,'").split("\t").join("');").split("#>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):n[o]=n[o]||(p.elementById(o)?e(p.elementById(o).innerHTML):"");return"function"==typeof i?t?i(t):i:""};var n={};p.tmpl=function e(o,t){var i=/\W/.test(o)?new Function("obj","var p=[],print=function(){p.push.apply(p,arguments);};with(obj){p.push('"+o.replace(/[\r\t\n]/g," ").split("<%").join("\t").replace(/((^|%>)[^\t]*)'/g,"$1\r").replace(/\t=(.*?)%>/g,"',$1,'").split("\t").join("');").split("%>").join("p.push('").split("\r").join("\\'")+"');}return p.join('');"):n[o]=n[o]||(p.elementById(o)?e(p.elementById(o).innerHTML):"");return"function"==typeof i?t?i(t):i:""},p.jsonpCall=function(e,o,t,i){v.$hooks.call("startProcess",i);var n=t||"Loginradius"+Math.floor(1e18*Math.random()+1);window[n]=function(e){o(e),v.$hooks.call("endProcess",i)};var a=-1!==e.indexOf("?")?e+"&callback="+n:e+"?callback="+n;p.addJs(a)},p.getButtonAttribute=function(e,o){var t,i=o||LoginRadiusDefaults.idPrefix;return v.buttonElements[e]?t=(t=v.buttonElements[e]).cloneNode(!0):((t=document.createElement("input")).type="button",t.value=v.buttonsName[e]||d[e]),t.id=i+"button-"+e,t},p.ajaxCall=function(e,o,n,a,r,s){var l=this,c=r;if(r&&-1!==r.indexOf("##")&&(c=r.split("##")[1]),LoginRadiusDefaults._uuidFormat.test(y.apiKey)){v.$hooks.call("startProcess",r,n);try{var u=new XMLHttpRequest;if(v.options.projectionFields){var t=Object.keys(v.options.projectionFields),i=["verifyOTP","updateData"],d=!1,p=r;if(v.LRCheckRegistration?(d=-1!==i.indexOf(r),p="registration"):v.LRCheckLogin&&(d=-1!==i.indexOf(r),p="login"),-1!==t.indexOf(r)||d){var m=v.options.projectionFields[p];if(m&&0<m.length){var g=["ErrorCode","Profile/Uid","Profile/IsDeleted","access_token","Profile/EmailVerified","Profile/PhoneIdVerified","Profile/PhoneId","PhoneId","PhoneIdVerified","EmailVerified","Uid","IsDeleted"];(v.options.twoFactorAuthentication||v.options.optionalTwoFactorAuthentication)&&g.push("SecondFactorAuthentication/SecondFactorAuthenticationToken","SecondFactorAuthentication/IsOTPAuthenticatorVerified","SecondFactorAuthentication/IsGoogleAuthenticatorVerified","SecondFactorAuthentication/OTPPhoneNo","SecondFactorAuthentication/ManualEntryCode"),m=w.mergeObjects(m,g,!0);for(var f="&fields=",h=0;h<m.length;h++)h===m.length-1?f+=m[h]:f=f+m[h]+",";o+=f}}}u.open(e,o,!0),-1===o.indexOf("cdn")&&-1===o.indexOf(".json")&&u.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.sottcheck&&(u.setRequestHeader("X-LoginRadius-Sott",v.options.sott),delete n.sottcheck),n?(n="string"==typeof n||n instanceof String?JSON.stringify(w.parseQueryString(n)):JSON.stringify(n),u.setRequestHeader("Content-Type","application/json"),u.send(n)):u.send(null),u.onreadystatechange=function(){if(4===u.readyState){var e,o=u.response;if(o){var t=JSON.parse(o);-1<Object.keys(t).map(function(e){return e.toLowerCase()}).indexOf("errorcode")?v.$hooks.call("xhrEndWithError",r):v.$hooks.call("xhrEndWithSuccess",r)}if("500"==u.status){var i=JSON.parse(o);i.ErrorCode="500",o=JSON.stringify(i),v.$hooks.call("xhrEndWithError",r)}(e=l.isJsonString(o))&&(v.$hooks.call("successCallback",c,e,n),s?a(s,e):a(e)),v.$hooks.call("endProcess",r)}},u.onerror=function(){v.$hooks.call("xhrEndWithError",r)}}catch(e){}}else v.log("apiKey is not in valid guid format.")},p.openWindow=function(e){if(e=e||p.href,!v.options.isMobile){var o=document.createElement("a");o.href=e;var t=w.getQueryParameterByName("provider",o.search),i="";v.options.noCallbackForSocialLogin&&(e+="&nocallback=true&callbackguid="+(i=v.util.randomString(16)));var n=v.options.customizeSocialPopup||"menubar=1,resizable=1,width=450,height=450,scrollbars=1";return window.open(e,"lrpopupchildwindow",n),v.$hooks.call("socialCalls",t,i),!1}var a="no";v.options.debugMode&&(a="yes");var r=window.open(e,"_blank","location="+a);r.addEventListener("loadstop",function(e){var o,t=null===(o=new RegExp("[\\?&]"+"token"+"=([^&#]*)").exec(e.url))?"":decodeURIComponent(o[1].replace(/\+/g," "));null!=t&&""!==t&&(r.close(),html5passToken(t))})},p.addHTMLContent=function(e,o,t,i,n){t=t||!1;var a=p.elementById(e);if(a||i)if(t||(a.innerHTML=""),i){var r=d[i.toLowerCase()],s=n||LoginRadiusDefaults.idPrefix,l=p.elementById(s+"submit-"+r.toLowerCase().replace(/ /g,"-"));w.insertBefore(o,l)}else a.appendChild(o);else{var c=w.elementsByClass(e);if(c&&0<c.length)for(var u=0;u<c.length;u++)t||(c[u].innerHTML=""),c[u].appendChild(o)}},p.addRecaptchaJS=function(e){window.grecaptcha||!v.options.v2Recaptcha&&!e?!window.grecaptcha&&v.options.invisibleRecaptcha&&p.addJs("https://www.google.com/recaptcha/api.js"):v.options.v2RecaptchaLanguage?p.addJs("https://www.google.com/recaptcha/api.js?render=explicit&hl="+v.options.v2RecaptchaLanguage):p.addJs("https://www.google.com/recaptcha/api.js?render=explicit"),(v.options.tencentCaptcha||v.options.tencentCaptchaAsFallback)&&p.addJs("https://ssl.captcha.qq.com/TCaptcha.js")},p.renderV2Recaptcha=function(t,e,i){var n,a=p.elementById(t);if(v.options.v2Recaptcha||e||v.options.invisibleRecaptcha||v.options.tencentCaptcha||v.options.tencentCaptchaAsFallback){window.grecaptcha&&a&&a.innerHTML&&grecaptcha.reset(window[t+"lr_recaptcha_widgets_idprefix"]);var o=setInterval(function(){n||(n=setInterval(function(){if(window.grecaptcha){if(a&&""===a.innerHTML){var e={sitekey:v.options.v2RecaptchaSiteKey||"6LeAiwITAAAAADlqb06JIGepBs8ZRo3OZ7C0W7U3",theme:"light",callback:function(e){a.style.display="block",i&&i(e)}};v.options.invisibleRecaptcha&&(e.size="invisible",e.callback="onCaptchaSubmit"),window[t+"lr_recaptcha_widgets_idprefix"]=grecaptcha.render(t,e),clearInterval(n)}}else{t+="_tencent";var o=document.getElementById(t);o&&(o.style.display="block"),"undefined"!=typeof TencentCaptcha&&new TencentCaptcha(document.getElementById(t)),clearInterval(n)}},1e3),clearInterval(o))},1e3)}},p.captchaSchema=function(e,o,t,i){if(!v.options.v2Recaptcha&&!t||p.elementById(e)){if(v.options.invisibleRecaptcha&&!p.elementById(e)){var n="";"hide"===t&&(n="display:none");var a={type:"captcha",name:"g-recaptcha-response",html:'<div id="'+e+'" style="'+n+'" class="g-recaptcha" data-sitekey="'+(v.options.v2RecaptchaSiteKey||"6LeAiwITAAAAADlqb06JIGepBs8ZRo3OZ7C0W7U3")+'" data-size="invisible" data-callback="onCaptchaSubmit"></div>',display:"Captcha",rules:""};o.push(a)}}else{var r={type:"captcha",name:"g-recaptcha-response",html:'<div id="'+e+'" class="recaptcha_widget"></div>',display:"Captcha",rules:"required"};o.push(r)}if(!p.elementById(e)&&(v.options.tencentCaptcha||v.options.tencentCaptchaAsFallback)){window.onTencentCaptchaSubmit=function(e){0==e.ret&&(i?i(e):window.onTencentCaptchaSubmitCallback(e))};var s={type:"captcha",name:"TencentCaptcha",html:"<div "+(t?"style=display:none; ":"")+' id= "'+e+'_tencent"  class="TencentCaptcha"  data-appid="'+v.options.tencentCaptchaAppid+'" data-cbfn="onTencentCaptchaSubmit"></div>',display:"Captcha",rules:""};o.push(s)}},p.checkPhoneOrEmailLogin=function(e){var o=w.parseQueryString(e);if(o.emailid||o.email)if(v.options.duplicateEmailWithUniqueUsername&&!o.username)e=e.replace("emailid","username").replace("email","username");else{var t=o.emailid||o.email;LoginRadiusDefaults.regexExpression.emailRegex.test(t)?e=e.replace("emailid","email"):v.options.phoneLogin&&LoginRadiusDefaults.regexExpression.phoneRegex.test(t)?(e=e.replace("emailid","phone").replace("email","phone"),e+="&phoneApi=1"):v.options.usernameLogin&&(e=e.replace("emailid","username").replace("email","username"))}return e}}function LoginRadiusApiFramework(u,d){var e=this;e.init=function(){u.lrApiFramework=!0},e.login=function(e,o,t){u.getAppConfiguration(function(){d.loginController(u.util.jsonToQueryString(e),null,o,t)})},e.otpLogin=function(e,o,t){u.getAppConfiguration(function(){d.loginOTPController(u.util.jsonToQueryString(e),null,o,t)})},e.twoFALogin=function(e,o,t,i,n,a,r,s){i=i||function(){},r=r||function(){},s=s||function(){},n=n||function(){},a=a||function(){};u.getAppConfiguration(function(){d.login2FAController(u.util.jsonToQueryString(e),null,o,t,"",r,s,i,n,a)})},e.registration=function(e,o,t,i,n,a){n=n||function(){},a=a||function(){};u.getAppConfiguration(function(){d.registrationController(o,null,t,i,"",e,n,a)})},e.forgotPassword=function(e,o,t){u.getAppConfiguration(function(){d.forgotPasswordController(u.util.jsonToQueryString(e),"",o,t)})},e.resetPassword=function(e,o,t){u.getAppConfiguration(function(){d.resetPasswordController(u.util.jsonToQueryString(e),o,t)})},e.emailVerification=function(e,o,t){u.getAppConfiguration(function(){d.emailVerificationController(e.vtoken,o,t)})},e.socialLogin=function(e,o,t,i,n,a){u.getAppConfiguration(function(){u.LoginRadiusHostedPage&&u.SSOinitFired||(i=i||function(){},n=n||function(){},d.socialLoginReceiveToken(e.token,a,o,t,null,i,n))})},e.resendEmailVerification=function(e,o,t){u.getAppConfiguration(function(){d.resendEmailVerificationController(u.util.jsonToQueryString(e),o,t)})},e.twoFAResendOTP=function(e,o,t){u.getAppConfiguration(function(){d.resendOTP2FAController(u.util.jsonToQueryString(e),o,t)})},e.twoFAVerifyOTP=function(e,o,t){u.getAppConfiguration(function(){d.verify2FAOTPController(u.util.jsonToQueryString(e),o,t)})},e.twoFAUpdatePhone=function(e,o,t,i,n,a,r){i=i||function(){},n=n||function(){},a=a||function(){},r=r||function(){};u.getAppConfiguration(function(){d.update2FAPhoneNumberController(e,null,o,t,null,i,n,a,r)})},e.updatePhone=function(e,o,t,i,n,a,r){a=a||function(){},r=r||function(){},i=i||function(){},n=n||function(){};u.getAppConfiguration(function(){d.updatePhoneNumberController(u.util.jsonToQueryString(e),null,o,t,null,a,r,i,n)})},e.verifyOTP=function(e,o,t,i){u.getAppConfiguration(function(){d.verifyOTPController(e,o,t,i)})},e.resendOTP=function(e,o,t){u.getAppConfiguration(function(){d.resendOTPController(u.util.jsonToQueryString(e),o,t)})},e.addEmail=function(e,o,t){u.getAppConfiguration(function(){d.addEmailController(u.util.jsonToQueryString(e),o,t)})},e.removeEmail=function(e,o,t){u.getAppConfiguration(function(){d.removeEmailController(u.util.jsonToQueryString(e),o,t)})},e.changeUsername=function(e,o,t){u.getAppConfiguration(function(){d.changeUsernameController(u.util.jsonToQueryString(e),o,t)})},e.changePassword=function(e,o,t){u.getAppConfiguration(function(){d.changePasswordController(u.util.jsonToQueryString(e),o,t)})},e.checkPhoneNumberAvailability=function(e,o,t){u.getAppConfiguration(function(){d.checkPhoneNumberAvailabilityController(u.util.jsonToQueryString(e),o,t)})},e.resetPasswordByPhone=function(e,o,t){u.getAppConfiguration(function(){d.resetPasswordByPhoneController(u.util.jsonToQueryString(e),o,t)})},e.forgotPasswordbyPhone=function(e,o,t){u.getAppConfiguration(function(){d.forgotPasswordbyPhoneController(u.util.jsonToQueryString(e),null,o,t)})},e.updateData=function(e,o,t,i,n,a){var r=i,s=n,l={};"object"==typeof i&&(l=i,r=n,s=a);var c={};c.Profile=l,c.access_token=t;u.getAppConfiguration(function(){d.updateData(c,null,o,r,s,"",e)})},e.checkEmailAvailability=function(e,o,t){u.getAppConfiguration(function(){d.checkEmailAvailabilityController(u.util.jsonToQueryString(e),o,t)})},e.checkUserNameAvailability=function(e,o,t){u.getAppConfiguration(function(){d.checkUserNameAvailabilityController(u.util.jsonToQueryString(e),o,t)})},e.resetPasswordBySecurityQuestion=function(e,o,t){u.getAppConfiguration(function(){d.resetPasswordBySecurityQuestionController(u.util.jsonToQueryString(e),o,t)})},e.updateSecurityQuestion=function(e,o,t){u.getAppConfiguration(function(){d.updateSecurityQuestionController(u.util.jsonToQueryString(e),o,t)})},e.resetTwoFactor=function(e,o,t){u.getAppConfiguration(function(){d.resetTwoFactorAuthenticationController(e,o,t)})},e.invalidateToken=function(e,o,t){u.getAppConfiguration(function(){d.invalidateToken(e,o,t)})},e.validateToken=function(e,o,t){u.getAppConfiguration(function(){d.validateToken(e,o,t)})},e.getSocialData=function(e,o,t,i,n){u.getAppConfiguration(function(){d.getSocialDataController(e,o,t,i,n)})},e.postSocialData=function(e,o,t,i,n,a){u.getAppConfiguration(function(){d.postSocialDataController(e,o,t,i,n,a)})},e.getCustomObjects=function(e,o,t){u.getAppConfiguration(function(){d.getCustomObjectsController(e,o,t)})},e.createCustomObject=function(e,o,t,i){u.getAppConfiguration(function(){d.createCustomObjectController(e,o,t,i)})},e.getCustomObjectById=function(e,o,t,i){u.getAppConfiguration(function(){d.getCustomObjectByIdController(e,o,t,i)})},e.deleteCustomObjectById=function(e,o,t,i){u.getAppConfiguration(function(){d.deleteCustomObjectController(e,o,t,i)})},e.updateCustomObjectById=function(e,o,t,i,n,a){u.getAppConfiguration(function(){d.updateCustomObjectController(e,o,t,a,i,n)})},e.getBackupCode=function(e,o,t){u.getAppConfiguration(function(){d.getBackupCodeController(e,o,t)})},e.resetBackupCode=function(e,o,t){u.getAppConfiguration(function(){d.resetBackupCodeController(e,o,t)})},e.autoLogin=e.smartLogin=function(e,o,t){u.getAppConfiguration(function(){d.smartLoginController(u.util.jsonToQueryString(e),o,t)})}}function setLoginRadiusDefaultSchema(e){e.loginFormSchema=[{type:"string",name:"emailid",display:"Email Id",rules:"required|valid_email",permission:"r"},{type:"password",name:"password",display:"Password",rules:"required|min_length[6]|max_length[32]",permission:"w"}],e.backupCodeFormSchema=[{type:"string",name:"backupcode",display:"Backup Code",rules:"required",permission:"r"}],e.resetPasswordByPhoneSchema=[{type:"string",name:"otp",display:"OTP",rules:"required",permission:"r"},{type:"password",name:"password",display:"Password",rules:"required|min_length[6]|max_length[32]",permission:"w"}],e.checkPhoneNumberSchema=[{type:"string",name:"phone",display:"Phone Number",rules:"required|valid_phoneno",permission:"r"}],e.QRCodeSchema=[{type:"string",name:"googleAuthenticatorCode",display:"Google Authenticator Code",rules:"required",permission:"r"}],e.getSecQSchema=[{type:"string",name:"emailid",display:"Email Id",rules:"required|valid_email",permission:"r"}],e.otpSchema=[{type:"string",name:"otp",display:"OTP",rules:"required",permission:"r"}],e.forgotPasswordFormSchema=[{type:"string",name:"emailid",display:"Email",rules:"required",permission:"r"}],e.smartLoginSchema=[{type:"string",name:"emailid",display:"Email Id",rules:"required",permission:"r"}],e.passwordLessLoginSchema=[{type:"string",name:"emailid",display:"Email",rules:"required",permission:"r"},{type:"string",name:"name",display:"Name",rules:"",permission:"r"}],e.changePasswordFormSchema=[{type:"password",name:"oldpassword",display:"Old Password",rules:"required",permission:"w"},{type:"password",name:"newpassword",display:"Password",rules:"required|min_length[6]|max_length[32]",permission:"w"},{type:"password",name:"confirmnewpassword",display:"Confirm Password",rules:"required|min_length[6]|max_length[32]|matches[newpassword]",permission:"w"}],e.emailSchema=e.forgotPasswordFormSchema,e.addEmailSchema=[{type:"string",name:"emailid",display:"Email",rules:"required|valid_email",permission:"r"},{type:"string",name:"type",display:"Type",rules:"required",permission:"r"}],e.changeUsernameFormSchema=[{type:"string",name:"username",display:"Username",rules:"required",permission:"r"}],e.resetPasswordFormSchema=[{type:"password",name:"password",display:"Password",rules:"required|min_length[6]|max_length[32]",permission:"w"},{type:"password",name:"confirmpassword",display:"Confirm Password",rules:"required|matches[password]|min_length[6]|max_length[32]",permission:"w"},{type:"hidden",name:"resettoken",display:"",rules:"required",permission:"w",value:""}],e.privacyPolicySchema=[{type:"multi",name:"acceptprivacypolicy",display:"I agree to the terms of service",rules:"",permission:"r"}],e.btnOTPSchema={type:"button",name:"click",display:"click",rules:"",permission:"r",event:"click",eventCallback:function(){}}}function setLoginRadiusModuleFunctions(c,u){var t=LoginRadiusDefaults.options,i=new SetLoginRadiusCommonFunctions(c),e=new LoginRadiusControllers(c,i),d=c.util;c.version="3.8.1",c.LRCheckRegistration=!1,c.passwordlessLoginFlag=!1,c.socialLoginFlag=!1,c.LRCheckLogin=!1,c.LRCheck2FA=!1,c.loginAction=!1,c.options="",c.sessionData={getUid:function(){return c.storage.getBrowserStorage(LoginRadiusDefaults.storedUidName)},getToken:function(){return c.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName)}},c.errorMessages=[],c.validationMessages=[],c.formCustomLabel={},c.formElementsTitle={},c.defaultOptionField={},c.formValidations={},c.formPlaceholder={},c.formElementAttributes={},c.buttonElements={},c.passwordMeterConfiguration=[],c.buttonsName={},c.eventsName={},c.log=function(e){c.options.debugMode&&"undefined"!=typeof console&&console.error(e)},c.customInterface=function(e,o){var t=o.templateName||"";a(function(){i.renderCustomInterface(e,"",t)})},c.clearSession=function(){c.storage.removeBrowserStorage(LoginRadiusDefaults.storedTokenName),c.storage.removeBrowserStorage(LoginRadiusDefaults.storedUidName),c.storage.removeBrowserStorage(LoginRadiusDefaults.storedTwoFAToken)},c.documentCookies=Object.assign({},LRNameSpace.cookies);var n=[];function a(e){c.isApiCallingStarted||""!==c.options?c.isApiCallingStarted&&(""!==c.options?e():"logout"===c.useraction?(c.isApiCallingStarted=!1,a(e)):n.push(e)):(c.isApiCallingStarted=!0,n.push(e),d.ajaxCall("get",LoginRadiusDefaults.configApiDomain+"appInfo?apikey="+u.apiKey,"",function(e){!function(e){var o={};if(u.securityQuestionEnabled=e.IsSecurityQuestion,u.appName=u.appName||e.AppName,u.RegistrationFormSchema=e.RegistrationFormSchema,u.loginLockedType=e.LoginLockedConfiguration&&e.LoginLockedConfiguration.LoginLockedType,u.anonymousLogin){var t={appName:u.appName};c.anonymous=new LRNameSpace.LRAnonymous,c.anonymous.init(t)}if(u.securityQuestionEnabled&&(u.SecurityQuestions=e.SecurityQuestions.Questions,u.securityQuestionsCount=void 0===u.securityQuestionsCount?e.SecurityQuestions.SecurityQuestionCount:u.securityQuestionsCount),void 0===u.passwordLength&&u.displayPasswordStrength&&u.RegistrationFormSchema){var i=d.findInSchema(u.RegistrationFormSchema,"name","password").rules.split("|"),n=d.isSubstring("min_length[",Object.keys(i).map(function(e){return i[e]})),a=i[n].substring(i[n].lastIndexOf("min_length[")+11,i[n].lastIndexOf("]")),r=d.isSubstring("max_length[",Object.keys(i).map(function(e){return i[e]})),s=i[r].substring(i[r].lastIndexOf("max_length[")+11,i[r].lastIndexOf("]")),l={min:parseInt(a),max:parseInt(s)};u.passwordLength=l}u.SocialSchema=e.SocialSchema,u.maskSensitiveInput=u.encryptedAnswer||u.maskSensitiveInput,u.noCallbackForSocialLogin=void 0!==u.noCallback?u.noCallback:u.noCallbackForSocialLogin,u.v2RecaptchaSiteKey=u.v2RecaptchaSiteKey||e.V2RecaptchaSiteKey,e.TwoFactorAuthentication.IsEnabled&&(o.optionalTwoFactorAuthentication=!0,o.twoFactorAuthentication=!1,o.googleAuthentication=e.TwoFactorAuthentication.IsGoogleAuthenticator,e.TwoFactorAuthentication.IsRequired&&(o.optionalTwoFactorAuthentication=!1,o.twoFactorAuthentication=!0)),u.otpEmailVerification=void 0===u.otpEmailVerification?e.OTPEmailVerification:u.otpEmailVerification,u.optionalTwoFactorAuthentication=void 0===u.optionalTwoFactorAuthentication?o.optionalTwoFactorAuthentication:u.optionalTwoFactorAuthentication,u.twoFactorAuthentication=void 0===u.twoFactorAuthentication?o.twoFactorAuthentication:u.twoFactorAuthentication,u.googleAuthentication=void 0===u.googleAuthentication?o.googleAuthentication:u.googleAuthentication,u.phoneLogin=void 0===u.phoneLogin?e.IsPhoneLogin:u.phoneLogin,u.passwordlessLoginOTP=void 0===u.instantOTPLogin&&void 0===u.passwordlessLoginOTP?e.IsInstantSignin.SmsOtp:u.instantOTPLogin||u.passwordlessLoginOTP,"optional"===e.EmailVerificationFlow?o.optionalEmailVerification=!0:"disabled"===e.EmailVerificationFlow&&(o.disabledEmailVerification=!0),u.optionalEmailVerification=void 0===u.optionalEmailVerification?o.optionalEmailVerification:u.optionalEmailVerification,u.disabledEmailVerification=void 0===u.disabledEmailVerification?o.disabledEmailVerification:u.disabledEmailVerification,u.loginOnEmailVerification=void 0===u.loginOnEmailVerification?e.IsLoginOnEmailVerification:u.loginOnEmailVerification,u.passwordlessLogin=void 0===u.instantLinkLogin&&void 0===u.passwordlessLogin?e.IsInstantSignin.EmailLink:u.instantLinkLogin||u.passwordlessLogin,u.askRequiredFieldForTraditionalLogin=void 0===u.askRequiredFieldForTraditionalLogin?e.AskRequiredFieldsOnTraditionalLogin:u.askRequiredFieldForTraditionalLogin,u.stayLogin=void 0===u.stayLogin?e.IsRememberMe:u.stayLogin,u.disableSignup=void 0===u.disableSignup?e.IsDisabledRegistration:u.disableSignup,u.riskBasedAuthentication=void 0===u.riskBasedAuthentication?e.IsRiskBasedAuthentication:u.riskBasedAuthentication,u.noCallbackForSocialLogin=void 0===u.noCallbackForSocialLogin?e.IsNoCallbackForSocialLogin:u.noCallbackForSocialLogin,u.usernameLogin=void 0===u.usernameLogin?e.IsUserNameLogin:u.usernameLogin,u.promptPasswordOnSocialLogin=void 0===u.promptPasswordOnSocialLogin?e.AskPasswordOnSocialLogin:u.promptPasswordOnSocialLogin,u.v2Recaptcha=void 0===u.v2Recaptcha?e.IsV2Recaptcha:u.v2Recaptcha,u.invisibleRecaptcha=void 0===u.invisibleRecaptcha?e.IsInvisibleRecaptcha:u.invisibleRecaptcha,u.askOptionalFieldsOnRegistration=void 0===u.askOptionalFieldsOnRegistration?e.AskOptionalFieldsOnSocialSignup:u.askOptionalFieldsOnRegistration,u.askEmailForUnverifiedProfileAlways=void 0===u.askEmailForUnverifiedProfileAlways?e.AskEmailIdForUnverifiedUserLogin:u.askEmailForUnverifiedProfileAlways,u.logoutOnVerifyEmail=void 0===u.logoutOnVerifyEmail?e.IsLogoutOnEmailVerification:u.logoutOnVerifyEmail,u.disableAccountLinking=e.IsDisabledAccountLinking,u.duplicateEmailWithUniqueUsername=e.DuplicateEmailWithUniqueUsername,u.customDomain=u.customDomain||e.CustomDomain,u.optionalRecaptchaConfiguration=e.OptionalRecaptchaConfiguration,u.tencentCaptchaAppid=void 0===u.tencentCaptchaAppid?e.QQTencentCaptchaKey:u.tencentCaptchaAppid,u.privacyPolicyConfiguration=e.PrivacyPolicyConfiguration}(e),u=d.mergeOptions(t,u),c.options=u;for(var o=0;o<n.length;o++)n[o]()},"registrationSchema"))}c.getAppConfiguration=a,c.progressiveProfiling=new LRNameSpace.ProgressiveProfiling(c,i,e,LoginRadiusDefaults),c.progressiveProfiling.init=function(){a(function(){c.progressiveProfiling.fetchSchema(function(e){c.progressiveProfilingSchema=e,c.$hooks.register("registrationSchemaFilter",function(e,o){c.options.progressiveProfilingTraditional&&(c.LoggedinSocialProvderProfile=o)})},"progressiveProfilingSchema")})}}function LoginRadiusHooksModel(u){var d=u.util;u.$hooks={hooks:[],register:function(e,o,t){void 0===u.$hooks.hooks[e]&&(u.$hooks.hooks[e]=[]),parseInt(t,10)===t&&u.$hooks.hooks[e].length>t+1?u.$hooks.hooks[e].splice(t,0,o):u.$hooks.hooks[e].push(o)},call:function(e){var o=Array.prototype.splice.call(arguments,1);if(void 0!==u.$hooks.hooks[e])for(var t=0,i=u.$hooks.hooks[e].length;t<i;++t)u.$hooks.hooks[e]&&u.$hooks.hooks[e][t]&&u.$hooks.hooks[e][t].apply(null,o)}},u.$hooks.register("addEventOnElement",function(e){d.extend(u.eventsName,e)}),u.$hooks.register("mapErrorMessages",function(e){if(e.code&&e.message)u.errorMessages.push(e);else if(d.isArray(e))for(var o=0;o<e.length;o++)e[o].code&&e[o].message?u.errorMessages.push(e[o]):u.log(notValidMessage);else u.log(notValidMessage)}),u.$hooks.register("passwordMeterConfiguration",function(e){d.isArray(e)?d.extend(u.passwordMeterConfiguration,e):u.log(passwordStrengthMessage)}),u.$hooks.register("setButtonsName",function(e){for(var o,t=Object.keys(e),i=t.length,n={};i--;)n[(o=t[i]).toLowerCase()]=e[o];d.extend(u.buttonsName,n)}),u.$hooks.register("mapValidationMessages",function(e){if(e.rule&&e.message)u.validationMessages.push(e);else if(d.isArray(e))for(var o=0;o<e.length;o++)e[o].rule&&e[o].message?u.validationMessages.push(e[o]):u.log(notValidMessage);else u.log(notValidMessage)}),u.$hooks.register("customizeFormLabel",function(e){d.extend(u.formCustomLabel,e)}),u.$hooks.register("customizeElementTitle",function(e){d.extend(u.formElementsTitle,e)}),u.$hooks.register("defaultChoiceOption",function(e){d.extend(u.defaultOptionField,e)}),u.$hooks.register("customizeFormPlaceholder",function(e){d.extend(u.formPlaceholder,e)}),u.$hooks.register("formValidationRules",function(e){d.extend(u.formValidations,e)}),u.$hooks.register("formAttributes",function(e){d.extend(u.formElementAttributes,e)}),u.$hooks.register("buttonAttributes",function(e){d.extend(u.buttonElements,e)}),u.$hooks.register("addFormCaptcha",function(n,a,r){u.getAppConfiguration(function(){r&&(u.options[r]=!0);var e=n+"recaptcha_widget";d.addRecaptchaJS();var o=[];d.captchaSchema(e,o,!1,a);var t=document.createElement("div");if(t.setAttribute("name",o[0].name),u.options.invisibleRecaptcha){var i=a.toString();i=/function ([^\(]*)/.exec(i)[1],o[0].html=o[0].html.replace("onCaptchaSubmit",i)}t.innerHTML=o[0].html,d.addHTMLContent(n,t,!0),d.renderV2Recaptcha(e,!1,a)})}),u.$hooks.register("addFormCaptchaExecute",function(e){var o=e+"recaptcha_widget",t=d.elementById(o+"_tencent");if(u.options.invisibleRecaptcha)var i=setInterval(function(){if("undefined"!=typeof grecaptcha){try{grecaptcha.execute(window[o])}catch(e){}clearInterval(i)}},1e3);else t&&"none"!==t.style.display&&(u.options.tencentCaptcha||u.options.tencentCaptchaAsFallback&&!window.grecaptcha)&&t.click()}),u.$hooks.register("successCallback",function(e,o,t){var i="";(u.$hooks.register("setCurrentAction",function(){u.storage.setBrowserStorage("LRSetSafariToken",e)}),e&&(i="verifyotp"===e.toLowerCase()?"otp":e.toLowerCase()),"1132"==o.ErrorCode)?(u.options.v2Recaptcha||u.options.invisibleRecaptcha||u.options.tencentCaptcha||u.options.tencentCaptchaAsFallback||(u.options.v2Recaptcha=!0),"verifyemail"===i&&(d.elementById("loginradius-submit-verify").style.display="block"),function(e){var o=u.util.elementById(e,!0);o&&(o.style.display="block"),window.grecaptcha&&o&&""!==o.innerHTML?grecaptcha.reset(window[e+"lr_recaptcha_widgets_idprefix"]):u.util.renderV2Recaptcha(e,!1)}(u.LRPrefix.replace("##","")+"recaptcha_widget_"+i)):"1148"==o.ErrorCode||"1165"==o.ErrorCode?function(e,a){if(u.options.securityQuestionEnabled){var r=d.jsonToQueryString(JSON.parse(e));e="string"==typeof e||e instanceof String?JSON.stringify(d.parseQueryString(e)):JSON.stringify(e),new LoginRadiusControllers(u).getSecurityQuestionsController(r,function(n){if(0<n.length)for(var e=0;e<n.length;e++)-1!==r.indexOf(n[e].name)&&n.splice(e,1);if(0<n.length){var o=document.createElement("div"),t=[],i=u.LRPrefix.split("##");new SetLoginRadiusCommonFunctions(u).createFormFields(n,o,a,t,i[0],i[1]),new FormValidator(i[1]+a,t,function(e){u.mergeFormErrors={},u.mergeFormErrors=e}),u.$hooks.register("startProcess",function(e,o){for(var t={},i=0;i<n.length;i++)o&&o[n[i].name]&&(t[n[i].name]=o[n[i].name],delete o[n[i].name]);o.securityanswer=t}),u.util.addHTMLContent("",o,!0,a,i[0])}})}}(t,i):"1194"==o.ErrorCode&&function(o,e){var t="",i=u.privacyPolicySchema.slice();i[0].rules="Strict"===u.options.privacyPolicyConfiguration.Mode?"required":"";var n=new SetLoginRadiusCommonFunctions(u),a=new LoginRadiusControllers(u,n);u.$hooks.call("getCurrentActionOptions",e);var r=u.currentActionOptions.onSuccess||function(){},s=u.currentActionOptions.onError||function(){},l=u.currentActionOptions.classPrefix||"";"socialLogin"===e?(t=u.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),u.$hooks.call("socialLoginFormRender")):t=o.Data.access_token;n.createForm(i,"privacyPolicyUpdate",u.currentLRContainer,function(e){a.updatePrivacyPolicy(t,o,r,s,null,u.currentLRContainer,l)},function(e){s(n.setMappedMessage(e))})}(o,e)}),u.$hooks.register("afterFormRender",function(e,o,t,i){var n=u.options.RegistrationFormSchema,a=[];if("registration"===e){for(var r,s={},l=0;l<n.length;l++)n[l]&&n[l].DataSource&&null!==n[l].DataSource&&(s[n[l].DataSource]=n[l],s[n[l].DataSource].children=[]);for(var c in s)s.hasOwnProperty(c)&&((r=s[c]).ParentDataSource&&null!=r.ParentDataSource?s[r.ParentDataSource].children.push(r):a.push(r));0<a.length&&function(r,e,s){for(var l=[],c=new SetLoginRadiusCommonFunctions(u),o=0;o<e.length;o++)e[o].ParentDataSource||d.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/registrationdata/"+e[o].DataSource+"?apiKey="+u.options.apiKey,"",function(e,o){if(l[e.DataSource]=o,l[e.DataSource])for(var t=0;t<l[e.DataSource].length;t++){var i=document.createElement("option");i.setAttribute("value",l[e.DataSource][t].Id),i.appendChild(document.createTextNode(l[e.DataSource][t].Key));var n=document.getElementById(s+"registration-"+e.name);n&&n.appendChild(i)}if(e&&e.children&&0<e.children.length)for(var a=0;a<e.children.length;a++)c.addChangeEventHandler(r,e,e.children[a],s)},"registration",e[o])}(o,a,t)}"validatecode"===e&&function(n,e,a){for(var o=0;o<e.length;o++)e[o].DataSource&&u.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/registrationdata/"+e[o].DataSource+"?apiKey="+u.options.apiKey,"",function(e,o){for(var t=0;t<o.length;t++){var i=document.createElement("option");i.setAttribute("value",o[t].Id),i.appendChild(document.createTextNode(o[t].Key)),document.getElementById(a+n+"-"+e.name).appendChild(i)}},"registration",e[o])}(e,n,t)}),u.$hooks.register("setLocaleBasedInfo",function(e){for(var o in e)if(e.hasOwnProperty(o))switch(o){case"labels":d.extend(u.formCustomLabel,e[o]);break;case"placeholders":d.extend(u.formPlaceholder,e[o]);break;case"validationMessages":u.$hooks.call("mapValidationMessages",e[o]);break;case"errorMessages":u.$hooks.call("mapErrorMessages",e[o]);break;case"passwordMeterConfiguration":u.$hooks.call("passwordMeterConfiguration",e[o]);break;case"buttonsName":u.$hooks.call("setButtonsName",e[o])}})}function SetLoginRadiusCommonFunctions(O){var I=this,D=LoginRadiusDefaults.messages,w=LoginRadiusDefaults.buttonNames;function k(t,i,e){var o=O.util.elementById(e+"_tencent"),n=O.util.elementById(e);window.grecaptcha&&O.options.invisibleRecaptcha&&n&&""!==n.innerHTML&&"none"!==n.style.display?grecaptcha.execute(window[e+"lr_recaptcha_widgets_idprefix"]):o&&"none"!==o.style.display&&(O.options.tencentCaptcha||O.options.tencentCaptchaAsFallback&&!window.grecaptcha)?window.onTencentCaptchaSubmitCallback=function(e){var o=O.util.serialize(t);o+="&qq_captcha_ticket="+e.ticket,o+="&qq_captcha_randstr="+e.randstr,i(o)}:i(O.util.serialize(t))}function C(e,o,t,i,n){var a="linksignin";"passwordlessLoginOTPButtonLabel"===e&&(a="otpsignin");var r=document.createElement("input");r.type="submit";var s=O.buttonsName[e.toLowerCase()]||w[e.toLowerCase()],l=w[e.toLowerCase()];r.value=s,r.id=i+a+"-"+l.toLowerCase().replace(/ /g,"-"),r.setAttribute("class",n+a+" "+a+"-"+i+l.toLowerCase().replace(/ /g,"-")),O.options.disableButtonOnsubmit&&(O.$hooks.register("startProcess",function(e){("otpsignin"===a&&window.lrpasswordlessloginotp||"linksignin"===a&&window.lrpasswordlesslogin)&&(r.disabled=!0)}),O.$hooks.register("xhrEndWithError",function(e){("otpsignin"===a&&window.lrpasswordlessloginotp||"linksignin"===a&&window.lrpasswordlesslogin)&&(r.disabled=!1)}),O.$hooks.register("xhrEndWithSuccess",function(e){("otpsignin"===a&&window.lrpasswordlessloginotp||"linksignin"===a&&window.lrpasswordlesslogin)&&O.options.enableSubmitOnSuccess&&(r.disabled=!1)})),o.appendChild(r),O.util.addEvent("click",t,function(e){window.lrpasswordlessloginotp=!1,window.lrpasswordlesslogin=!1}),"passwordlessLoginOTPButtonLabel"===e?O.util.addEvent("click",r,function(e){window.lrpasswordlessloginotp=!0,window.lrpasswordlesslogin=!1}):O.util.addEvent("click",r,function(e){window.lrpasswordlesslogin=!0,window.lrpasswordlessloginotp=!1})}I.renderCustomInterface=function(e,b,R,P,E,o){O.options.selector=e;function t(e){var o,t=e;O.options.providerCountry&&!O.options.providersList&&(t=function(e,o){for(var t=[{Name:"Facebook",country:"global",except:"china"},{Name:"Google",country:"global",except:"china"},{Name:"Yahoo",country:"global",except:"china"},{Name:"Live",country:"global",except:"china"},{Name:"Twitter",country:"global",except:"china"},{Name:"Linkedin",country:"global",except:"china"},{Name:"Myspace",country:"US"},{Name:"Foursquare",country:"global",except:"china"},{Name:"Vkontakte",country:"Russia"},{Name:"Renren",country:"China"},{Name:"QQ",country:"China"},{Name:"Kaixin",country:"China"},{Name:"Github",country:"global",except:"china"},{Name:"Mailru",country:"Russia"},{Name:"Amazon",country:"US"},{Name:"Paypal",country:"global"},{Name:"Salesforce",country:"global"},{Name:"ODNOKLASSNIKI",country:"Russia"},{Name:"WORDPRESS",country:"global"},{Name:"GOOGLEPLUS",country:"global",except:"china"},{Name:"Disqus",country:"global",except:"china"},{Name:"INSTAGRAM",country:"global",except:"china"},{Name:"SINAWEIBO",country:"China"},{Name:"XING",country:"Germany"},{Name:"PINTEREST",country:"global",except:"china"},{Name:"LINE",country:"global"},{Name:"AOL",country:"US"}],i=0;i<t.length;i++)for(var n=0;n<o.length;n++)if(o[n]&&o[n].Name.toLowerCase()===t[i].Name.toLowerCase()){if(t[i].country.toLowerCase()===e.toLowerCase()||"global"===t[i].country.toLowerCase()&&!t[i].except||t[i].except&&t[i].except.toLowerCase()!==e.toLowerCase())continue;o.splice(n,1)}return o}(O.options.providerCountry,t)),O.$hooks.call("socialInterfaceProviders",t),O.options.providersList&&(o=O.options.providersList);var i=O.options.hashTemplate?O.util.hashTmpl:O.util.tmpl,n=R.split(","),a=O.util.getQueryParameterByName("scope");""===O.options.scope&&a&&(O.options.scope=a);var r="&callback="+O.options.callbackUrl+"&same_window="+O.options.callbackInsideSameWindow+"&is_access_token="+O.options.accessTokenResponse+"&callbacktype="+O.options.callbackType+"&disablesignup="+O.options.disableSignup;-1===r.indexOf("scope")&&(r+="&scope="+O.options.scope),O.options.isMobile&&(r+="&ismobile=true"),E&&(r+="&ac_linking=true"),O.options.isCustomScope&&(r+="&is_custom_scope=true");for(var s=O.util.getThisObjectName(),l=0;l<n.length;l++){var c=O.util.elementById(n[l]);if(c)-1!==c.innerHTML.indexOf("ac_linking")&&(r=r.replace("&ac_linking=true",""));var u=[];A[l]="";for(var d=0;d<t.length;d++){t[d].ObjectName=s,-1===t[d].Endpoint.indexOf("callback=")&&(t[d].Endpoint+=r);var p={islinked:!1,providerId:!1};b&&b[t[d].Name.toLowerCase()]&&(p.islinked=!0,p.providerId=b[t[d].Name.toLowerCase()]),t[d].isLinked=p.islinked,t[d].providerId=p.providerId;var m=O.options.unLinkAccountCallbackUrl||window.location.href;m+=-1===m.indexOf("?")?"?":"&";var g=t[d];u.push(g)}for(var f=[],h=0;h<u.length;h++)u[h].isLinked&&f.push(u[h]);if(0<f.length){for(var v=0;v<u.length;v++)u[v].isLinked||f.push(u[v]);u=f}for(var y=0;y<u.length;y++)""!==n[l]&&(void 0!==o&&-1===o.indexOf(u[y].Name)&&-1===o.indexOf(u[y].Name.toLowerCase())||(A[l]+=i(n[l],u[y])))}for(var w=O.options.selector.split(","),k=0;k<w.length;k++){var C=w[k];if(0===C.indexOf(".")){C=C.replace(".","");var L=O.util.elementsByClass(C);if(L&&0<L.length)for(var T=0;T<L.length;T++)P?L[T].innerHTML+=A[k]:L[T].innerHTML=A[k]}else if(""!==C){var S=O.util.elementById(C);S&&(P?S.innerHTML+=A[k]:S.innerHTML=A[k])}}}var A=[];o?t(o):void 0!==O.options.SocialSchema&&t(O.options.SocialSchema.Providers)},I.mapRegistrationSchema=function(e,o,t){var i=O.util.parseQueryString(o),n={},a={},r={},s=[];for(var l in i){if(-1!==l.indexOf("cf_"))n[l.replace("cf_","")]=i[l],delete i[l];else if("emailsubscription"===l)i.IsEmailSubscribed=!("on"!==i[l]&&"true"!==i[l]),delete i[l];else if("emailid"===l||"email"===l)a.value=i[l],a.type="Primary";else if("SecurityQuestionAnswer"!==l&&-1!==l.indexOf("securityQuestion")){for(var c={},u=0;u<O.options.securityQuestionsCount;u++)i["securityAnswer"+u]&&i["securityQuestion"+u]&&(c[i["securityQuestion"+u]]=i["securityAnswer"+u]),delete i["securityQuestion"+u],delete i["securityAnswer"+u];0!==Object.keys(c).length&&(i.SecurityQuestionAnswer=c)}else if("country"===l)r=-1!==i[l].indexOf("|")?{code:i[l].split("|")[0],name:i[l].split("|")[1]}:{code:"",name:i[l]};else{var d=O.util.findInSchema(e,"name",l);if(d&&d.Parent){var p=-1!==l.indexOf("_")?l.split("_")[1]:l;if(void 0===i[d.Parent]){i[d.Parent]=[];var m={};m[p]=i[l],"Addresses"===d.Parent?m.type="personal":"PhoneNumbers"!==d.Parent||m.phonetype||(m.phonetype="default"),i[d.Parent].push(m)}else"Addresses"!==d.Parent||i[d.Parent][0].type||(i[d.Parent][0].type="personal"),i[d.Parent][0][p]=i[l];delete i[l]}}}return 0!==Object.keys(n).length&&(i.CustomFields=n),0!==Object.keys(a).length&&(s.push(a),i.email=s),0!==Object.keys(r).length&&(i.country=r),i};var s=!(I.showQRCode=function(e,o,t,i,n,a,r){var s=O.QRCodeSchema.slice();O.options.maskSensitiveInput?s[0].type="password":s[0].type="string";function l(e,o){if(e&&s.splice(0,0,{type:"image",name:"qrcode",display:"QR Code",rules:"",permission:"r",value:e}),o){var t=n||LoginRadiusDefaults.classPrefix;s.splice(1,0,{type:"button",name:"ManualEntryCode",display:"Get Manual Entry Code",rules:"",permission:"r",title:"Use this code when you unable to scan QR code. Tap 'Enter a provided key' then enter the email address of your Account and enter this key in your authenticator app",event:"click",eventCallback:function(e){document.getElementsByClassName("content-"+t+"ManualEntryCode")[0].innerHTML=o}})}}var c,u,d=!0,p=new LoginRadiusControllers(O,I);if(e.SecondFactorAuthentication)c=e.SecondFactorAuthentication.QRCode,u=e.SecondFactorAuthentication.ManualEntryCode,e.SecondFactorAuthentication.IsGoogleAuthenticatorVerified||l(c,u);else if(d=!1,c=e.QRCode,u=e.ManualEntryCode,e.IsGoogleAuthenticatorVerified){if("false"!==O.storage.getBrowserStorage(LoginRadiusDefaults.storedOTPAuth)&&O.options.twoFactorAuthentication||O.options.optionalTwoFactorAuthentication){var m=O.util.getButtonAttribute("disablegoogleauthenticator",n);O.util.addHTMLContent(o,m),O.util.addEvent("click",m,function(e){p.resetTwoFactorAuthenticationController("googleauthenticator",t,i)})}}else d=!0,l(c,u);d&&I.createForm(s,"showQRcode",o,function(e){p.verify2FAOTPController(e,t,i,a,r)},function(e){i(e)},n)});I.socialLogin=function(t,i,n,a){var r=new LoginRadiusControllers(O,I);window.html5passToken=function(e){if(!s){s=!0,t=LoginRadiusDefaults.socialRegFormId||t;var o=O.storage.getBrowserStorage("LRSetSafariToken");o&&(O.$hooks.call("getCurrentActionOptions",o),i=window.LRSafarionSuccess||i,n=window.LRSafarionError||n),r.socialLoginReceiveToken(e,t,i,n,a)}};var e=O.util.getHashParam("lr-token");e&&window.html5passToken(e),O.loginRadiusHtml5PassToken=window.html5passToken,O.options.isMobile||O.options.noCallbackForSocialLogin?O.$hooks.register("socialCalls",function(e,o){if(O.options.noCallbackForSocialLogin){I.pingForSmartLogin(o,function(e){e.access_token?r.socialLoginReceiveToken(e.access_token,t,i,n,a):i(e)},function(){})}}):O.util.addEvent("message",window,function(e){-1===e.origin.indexOf(O.options.customDomain)&&-1===e.origin.indexOf(LoginRadiusDefaults.hubDomain)||(t=LoginRadiusDefaults.socialRegFormId||t,"string"==typeof e.data&&LoginRadiusDefaults._uuidFormat.test(e.data)&&r.socialLoginReceiveToken(e.data,t,i,n,a))})},I.resetPassword=function(o,t,i,n,a){var r,s,e=O.resetPasswordFormSchema.slice(),l=new LoginRadiusControllers(O,I);if(null==O.util.getHashParam("vtype")){var c,u;if(e=O.resetPasswordByPhoneSchema.slice(),I.setPasswordRule(O.util.findInSchema(e,"name","password")),a)a.email?(c="email",u=a.email):a.username&&(c="username",u=a.username),e.push({type:"hidden",name:c,value:u});else if(O.options.phoneLogin&&(s="&"+LoginRadiusDefaults.LRPhoneNo,!O.util.findInSchema(e,"name","resendotp"))){var d=Object.assign({},O.btnOTPSchema,{name:"resendotp",display:"Resend OTP",eventCallback:function(e){l.forgotPasswordbyPhoneController(LoginRadiusDefaults.LRPhoneNo,o,t,i,n,function(){})}});e.push(d)}}else{I.setPasswordRule(O.util.findInSchema(e,"name","password")),I.setPasswordRule(O.util.findInSchema(e,"name","confirmpassword"));var p=O.util.getHashParam("vtoken");if(p)if(O.options.verifyEmailByOTP){var m=O.util.getQueryParameterByName("email");r="&otp="+p,r+="&email="+encodeURIComponent(m.replace(/ /g,"+")),e.splice(2,1)}else O.resetPasswordFormSchema[2].value=p;else i([{Message:"Verification Token not found in query string."}])}I.createForm(e,"resetpassword",o,function(e){-1===e.indexOf("otp")||a?(r&&(e+=r),l.resetPasswordController(e,t,i,o,n)):l.resetPasswordByPhoneController(e+s,t,i,o,n)},function(e){i(e)},n)},I.setPasswordRule=function(e,o){O.options.passwordLength=O.options.passwordlength||O.options.passwordLength;var t=O.util.findInSchema(O.options.RegistrationFormSchema,"name","password").rules;if(e&&e.rules){var i=new RegExp(/matches\[\w*\]/).exec(e.rules);if(i){var n=i[0];e.rules=[t,n].join("|")}else e.rules=t;O.options.passwordLength&&O.options.passwordLength.min&&O.options.passwordLength.max&&(e.rules=e.rules||"",e.rules=e.rules.replace("min_length[6]","min_length["+O.options.passwordLength.min+"]").replace("max_length[32]","max_length["+O.options.passwordLength.max+"]"))}(o=o||!1)&&e&&(e.rules="required")},I.changeNumberForm=function(o,e,t,i,n,a,r,s){var l=O.util.getButtonAttribute("changenumber",n),c=O.util.getButtonAttribute("disableotpauthenticator",n),u=O.storage.getBrowserStorage(LoginRadiusDefaults.storedGAAuth),d=O.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);e?(e.appendChild(l),d&&!O.LRCheckLogin&&(O.options.optionalTwoFactorAuthentication||"false"!==u&&O.options.twoFactorAuthentication)&&e.appendChild(c)):(O.util.addHTMLContent(o,l,a),d&&!O.LRCheckLogin&&(O.options.optionalTwoFactorAuthentication||"false"!==u&&O.options.twoFactorAuthentication)&&O.util.addHTMLContent(o,c,!0)),O.util.addEvent("click",c,function(e){new LoginRadiusControllers(O,I).resetTwoFactorAuthenticationController("otpauthenticator",t,i)}),O.util.addEvent("click",l,function(e){document.getElementsByName(n+"changePhone")[0]||I.updatePhoneNumber(o,t,i,n,"changePhone",r,s)})},I.validateAndCall=function(e){LoginRadiusDefaults.isSSOInitFired?O.options.appName?e():O.log("LoginRadius site name (app name) required to do SSO"):O.log("Init method should be called first then login.")},I.logout=function(i){I.validateAndCall(function(){var e=O.options.tokenExpire?"?tokenExpire=1":"",o=O.options.tokenExpire?"tokenExpire":"logout",t=O.options.customDomain||O.options.appName+"."+LoginRadiusDefaults.hubDomain;O.util.jsonpCall("https://"+t+"/ssologin/"+o+e,function(e){LRNameSpace.cookies.removeItem(LoginRadiusDefaults.tokenCookie,O.options.appPath),O.clearSession(),i&&i()},"logout")})},I.otpEmailVerification=function(t,i,n,a,r){var e=O.otpSchema;I.createForm(e,"otp",t,function(e){var o="";o="string"!=typeof r?(e=O.util.parseQueryString(e),O.util.mergeOptions(r,e)):r+"&"+e,new LoginRadiusControllers(O,I).emailVerificationController(o,i,n,t,a,!0)},function(e){n(e)},a)},I.loginHandleToken=function(e,o,t,i,n,a){if(LoginRadiusDefaults.lrResponseCounter=0,LoginRadiusDefaults.lrCounterJwtResponse="",LoginRadiusDefaults.lrCounterTokenResponse="",e)if(e.ErrorCode)i(I.loginRadiusErrorTojsError(e));else{if(e.Data&&e.Data.hasOwnProperty("Profile")&&(delete(e=e.Data).Data,delete e.IsPosted),O.options.privacyPolicyConfiguration.IsEnabled&&e.Profile){var r=!1;e.Profile.PrivacyPolicy&&e.Profile.PrivacyPolicy.Version&&(r=I.checkForLatestPrivacyPolicy(e.Profile)),e.Profile=Object.assign({},e.Profile,{IsLatestPrivacyPolicy:r})}function s(){O.LoginRadiusHostedPage&&LRNameSpace.cookies.setItem("lr-session-token",e.access_token),LoginRadiusDefaults.lrResponseCounter++,LoginRadiusDefaults.lrCounterTokenResponse=e,O.options.tokenType&&"jwt"===O.options.tokenType.toLowerCase()?2===LoginRadiusDefaults.lrResponseCounter&&(e.jwttoken=LoginRadiusDefaults.lrCounterResponse.signature,null!=o&&""!==o?t(e,O.util.parseQueryString(o)):t(e)):null!=o&&""!==o?t(e,O.util.parseQueryString(o)):t(e)}var l=O.storage.getBrowserStorage("LRSetSafariToken");if(O.storage.removeBrowserStorage("LRSetSafariToken"),O.setHostedToken||l)t(e);else{var c=O.registrationFormSchema&&0<O.registrationFormSchema.length?O.registrationFormSchema:O.options.RegistrationFormSchema,u=O.util.findInSchema(c,"name","phoneid"),d=u&&-1!==u.rules.indexOf("required")&&O.options.phoneLogin,p=e.Profile||e.Data,m=!(O.options.disabledEmailVerification||O.options.optionalEmailVerification);if(p&&!p.EmailVerified&&m&&!a)i([I.setMappedMessage(D.emailNotVerified)]);else if(d&&p&&!p.PhoneIdVerified&&!a)if(p.PhoneId){var g={phone:p.PhoneId},f=O.currentLRContainer,h=new LoginRadiusControllers(O,I),v=n+LoginRadiusDefaults.idPrefix+"recaptcha_widget_verifyotp";h.resendOTPController(g,function(){I.verifyOTP("phone="+p.PhoneId,f,t,i,n),I.resendOTP("phone="+p.PhoneId+"&noPhoneVerified=false",f,t,i,n)},i,v,f,n)}else O.log("Phone ID is required field.");else{if(p&&p.Uid&&O.storage.setBrowserStorage(LoginRadiusDefaults.storedUidName,p.Uid),O.storage.setBrowserStorage(LoginRadiusDefaults.storedTokenName,e.access_token),LoginRadiusDefaults.isSSOInitFired&&e.access_token){I.setToken(e.access_token);var y=navigator.userAgent.toLowerCase(),w=!!(-1===y.indexOf("crios")&&-1===y.indexOf("chrome")&&0<=y.indexOf("safari")),k=/ipad|iphone|ipod/.test(y)&&!window.MSStream,C=0<=y.indexOf("ucbrowser"),L=/crios/i.test(y),T=O.options.customDomain||O.options.appName+"."+LoginRadiusDefaults.hubDomain,S=O.util.getQueryParameterByName("vtype"),b=O.util.getQueryParameterByName("vtoken"),R=window.location.href;if(S&&(R=R.replace("?vtype="+S,"").replace("&vtype="+S,"")),b&&(R=R.replace("&vtoken="+b,"").replace("?vtoken="+b,"")),R=encodeURIComponent(R),w||k&&C||k&&L){O.options.askRequiredFieldForTraditionalLogin||O.storage.setBrowserStorage("LRTraditionalLogin",!0),O.$hooks.call("setCurrentAction");var P=O.options.safariHttpsEnable?"https":"http";if(O.options.stayLogin){var E=O.storage.getBrowserStorage("lr-rememberme");O.storage.removeBrowserStorage("lr-rememberme"),window.location=P+"://"+T+"/ssologin/setCustomSafariToken?token="+e.access_token+"&apiKey="+O.options.apiKey+"&isrememberMe="+E+"&callback="+R}else window.location=P+"://"+T+"/ssologin/setSafariToken?token="+e.access_token+"&apiKey="+O.options.apiKey+"&callback="+R}else{var A="",F="setToken";O.options.stayLogin&&(A="&isrememberMe="+O.storage.getBrowserStorage("lr-rememberme"),O.storage.removeBrowserStorage("lr-rememberme"),F="setCustomToken"),O.util.jsonpCall("https://"+T+"/ssologin/"+F+"?token="+e.access_token+"&apiKey="+O.options.apiKey+A,function(){s()},"","setToken")}}else s();O.options.tokenType&&"jwt"===O.options.tokenType.toLowerCase()&&I.getJwtToken(e.access_token,t,i)}}}},I.getJwtToken=function(e,o,t){O.util.ajaxCall("get",LoginRadiusDefaults.cloudApiDomain+"/sso/jwt/api/token?apikey="+O.options.apiKey+"&jwtapp="+O.options.integrationName+"&access_token="+e,"",function(e){LoginRadiusDefaults.lrResponseCounter++,LoginRadiusDefaults.lrCounterJwtResponse=e,2===LoginRadiusDefaults.lrResponseCounter&&(e.ErrorCode?t(e):(LoginRadiusDefaults.lrCounterTokenResponse.jwttoken=e.signature,o(LoginRadiusDefaults.lrCounterTokenResponse)))},"JWTToken")},I.mapSchema=function(o,e,t,i){e=O.util.keysToLowerCase(e);var n=[];Object.keys(o).forEach(function(e){n.push(o[e])});for(var a=0;a<o.length;a++)if(null!=o[a])if("emailid"===o[a].name.toLowerCase()&&e.email&&e.email[0]&&e.email[0].value&&""!==e.email[0].value){if(e.emailverified||(O.options.disabledEmailVerification||O.options.optionalEmailVerification)&&!O.options.askEmailForUnverifiedProfileAlways){n[a].value=e.email[0].value,o[a]=null;continue}if(!O.options.askEmailForUnverifiedProfileAlways||O.setHostedToken){n[a]=o[a]=null;continue}}else if("country"===o[a].name.toLowerCase()&&""===o[a].Parent&&e.country&&null!=e.country.name&&""!==e.country.name&&"unknown"!==e.country.name.toLowerCase())n[a].value=e.country.name,e.country.code&&(n[a].value=e.country.code+"|"+n[a].value),o[a]=null;else if("emailsubscription"===o[a].name.toLowerCase()&&e.isemailsubscribed&&""!==e.isemailsubscribed)n[a].value=e.isemailsubscribed,o[a]=null;else if("phoneid"===o[a].name.toLowerCase()&&e.phoneid&&""!==e.phoneid)n[a].value=e.phoneid.replace("+",""),o[a]=null;else if("birthdate"===o[a].name.toLowerCase()&&e.birthdate&&""!==e.birthdate){var r=e.birthdate.replace("-","/").replace("-","/").split("/");if(r[2]&&""!==r[2]){n[a].value=e.birthdate,o[a]=null;continue}}else if("password"===o[a].name.toLowerCase()||"confirmpassword"===o[a].name.toLowerCase()){if(null!=e.password||!O.options.promptPasswordOnSocialLogin&&!O.options.promptPasswordOnFirstLoginForSocial){n[a]=o[a]=null;continue}}else if(""!==o[a].Parent&&void 0!==o[a].Parent&&null!==o[a].Parent){if(o[a].Parent&&e[o[a].Parent.toLowerCase()]&&void 0!==e[o[a].Parent.toLowerCase()]){var s=-1!==o[a].name.indexOf("_")?o[a].name.split("_")[1]:o[a].name,l=Object.keys(e[o[a].Parent.toLowerCase()]).length-1;if("object"!=typeof e[o[a].Parent.toLowerCase()]||!e[o[a].Parent.toLowerCase()][l]||!e[o[a].Parent.toLowerCase()][l][s.toLowerCase()]){n[a].value=e[o[a].Parent.toLowerCase()][o[a].name.toLowerCase()],o[a]=null;continue}if(null!=e[o[a].Parent.toLowerCase()][l][s.toLowerCase()]&&void 0!==e[o[a].Parent.toLowerCase()][l][s.toLowerCase()]&&"unknown"!==e[o[a].Parent.toLowerCase()][l][s.toLowerCase()]){n[a].value=e[o[a].Parent.toLowerCase()][l][s.toLowerCase()],o[a]=null;continue}}}else{if(0===o[a].name.indexOf("cf_")&&e.customfields&&e.customfields[o[a].name.replace("cf_","").toLowerCase()]){n[a].value=e.customfields[o[a].name.replace("cf_","").toLowerCase()],o[a]=null;continue}o[a].name&&"object"!=typeof e[o[a].name.toLowerCase()]&&null!=e[o[a].name.toLowerCase()]&&""!==e[o[a].name.toLowerCase()]&&void 0!==e[o[a].name.toLowerCase()]&&"unknown"!==e[o[a].name.toLowerCase()]&&(n[a].value=e[o[a].name.toLowerCase()],o[a]=null)}if(o=o.filter(function(e){return e}),t&&"profileeditor"===t&&!e.ErrorCode)return n=n.filter(function(e){return e});for(var c=0;c<o.length;c++)if(null!=o[c].rules&&""!==o[c].rules&&-1<o[c].rules.indexOf("required")||O.options.askOptionalFieldsOnRegistration&&!0===e.firstlogin&&"email"!==e.registrationprovider.toLowerCase()||O.options.askOptionalFieldsOnProgressiveSteps&&i)return t&&!e.ErrorCode?n=n.filter(function(e){return e}):o;return[]},I.loginRadiusErrorTojsError=function(e){var o=[];return o.push(I.setMappedMessage(e)),o},I.setMappedMessage=function(e){for(var o=0;o<O.errorMessages.length;o++)O.errorMessages[o].code==e.ErrorCode&&(e.Message=O.errorMessages[o].message||e.Message,e.Description=O.errorMessages[o].description||e.Description);return e},I.setCustomLabel=function(e){for(var o=0;o<e.length;o++)e[o]&&O.formCustomLabel[e[o].name]&&(e[o].display=O.formCustomLabel[e[o].name])},I.setCustomTitle=function(e){for(var o=0;o<e.length;o++)e[o]&&O.formElementsTitle[e[o].name]&&(e[o].title=O.formElementsTitle[e[o].name])},I.setPlaceholder=function(e){for(var o=0;o<e.length;o++)e[o]&&O.formPlaceholder[e[o].name]&&(e[o].placeholder=O.formPlaceholder[e[o].name])},I.setValidation=function(e){O.formValidations[e.name]&&(e.rules=O.formValidations[e.name])},I.setAttribute=function(e,o){if(O.formElementAttributes[e.name])for(var t=O.formElementAttributes[e.name].split("&"),i=0;i<t.length;i++){var n=t[i].split("="),a=n.splice(0,1),r=n.join("=");o.setAttribute(a,r)}},I.verifyOTP=function(i,e,n,a,o,r,s){var l=!1,t="otp";O.LRCheck2FA&&(O.options.twoFactorAuthentication||O.options.optionalTwoFactorAuthentication)&&!O.LRCheckRegistration&&(l=!0,t="twofaotp");var c=O.otpSchema;I.createForm(c,t,e,function(e){var o,t=new LoginRadiusControllers(O,I);l?t.verify2FAOTPController(e,n,a,r,s):(("string"==typeof i||i instanceof String)&&(i=O.util.parseQueryString(i)),e=O.util.parseQueryString(e),i.phone?o={phone:i.phone}:(i.phoneid||i.phoneId)&&(o={phone:i.phoneid||i.phoneId}),i.onetouchloginflag&&(e.onetouchloginflag=!0),i.haveToken&&(e.haveToken=!0),t.verifyOTPController(e,o,n,a,r,s))},function(e){a(e)},o)},I.resendOTP=function(e,o,t,i,n,a,r){var s={},l=!0;("string"==typeof e||e instanceof String)&&(e=O.util.parseQueryString(e)),e.noPhoneVerified&&(l=!1);var c=!0;e.phoneid||e.phoneId?(c=!1,s={phone:e.phoneid||e.phoneId}):e.phone?(O.socialLoginFlag||(c=!1),s=e):e.phoneNo2FA||e.phoneno2fa?s={phoneno2fa:e.phoneNo2FA||e.phoneno2fa}:e.SecondFactorAuthentication&&e.SecondFactorAuthentication.OTPPhoneNo&&(s={phoneno2fa:e.SecondFactorAuthentication.OTPPhoneNo});var u=O.util.getButtonAttribute("resendotp",n),d=n||LoginRadiusDefaults.classPrefix,p=c?"twofaotp":"otp",m=document.getElementsByName(d+p)[0];m||(p="twofaotp"===p?"otp":"twofaotp",m=document.getElementsByName(d+p)[0]),m&&m.appendChild(u),!O.LRCheckLogin||!c||l&&"false"!==O.storage.getBrowserStorage(LoginRadiusDefaults.storedOTPAuth)||I.changeNumberForm(o,m,t,i,d,"",a,r),e.onetouchloginflag&&(s.onetouchloginflag=!0),e.updatePhone&&(s.updatePhone=!0),O.util.addEvent("click",u,function(e){I.resendOTPManually(s,o,t,i,d,a,r)})},I.sendInstantSignInLink=function(e,o,t,i,n){var a=O.util.parseQueryString(e),r=a.emailid||a.email;if(LoginRadiusDefaults.regexExpression.emailRegex.test(r)||O.options.usernameLogin||O.options.duplicateEmailWithUniqueUsername){var s;LoginRadiusDefaults.regexExpression.emailRegex.test(r)?s="email="+r:(O.options.usernameLogin||O.options.duplicateEmailWithUniqueUsername)&&(s="username="+r);var l=O.options.instantLinkLoginEmailTemplate||O.options.passwordlessLoginEmailTemplate;O.util.ajaxCall("GET",LoginRadiusDefaults.apiDomain+"/auth/login/passwordlesslogin/email?apiKey="+O.options.apiKey+"&verificationUrl="+O.options.verificationUrl+"&passwordlesslogintemplate="+l+"&"+s,"",function(e){window.lrpasswordlessloginotp=!1,window.lrpasswordlesslogin=!1,e.ErrorCode?t(I.loginRadiusErrorTojsError(e)):o(e)},"passwordlessLogin")}else t([I.setMappedMessage(D.invalidEmail)])},I.sendInstantSignInOtp=function(i,n,a,r,s){var e=O.util.parseQueryString(i),o=e.emailid||e.email;if(LoginRadiusDefaults.regexExpression.phoneRegex.test(o)){var l="phone="+o;O.util.ajaxCall("GET",LoginRadiusDefaults.apiDomain+"/auth/login/passwordlesslogin/otp?apiKey="+O.options.apiKey+"&"+l,"",function(e){if(window.lrpasswordlessloginotp=!1,window.lrpasswordlesslogin=!1,e.ErrorCode)a(I.loginRadiusErrorTojsError(e));else if(n(e),e.Data&&e.Data.Sid){var t=new LoginRadiusControllers(O,I);O.$hooks.register("beforeFormRender",function(e,o){if(!O.util.findInSchema(o,"name","resendotp")){var t=Object.assign({},O.btnOTPSchema,{name:"resendotp",display:"Resend OTP",eventCallback:function(e){I.sendInstantSignInOtp(i,n,a,r,s)}});o.push(t)}});var o=O.otpSchema;I.createForm(o,"otp",r,function(e){var o=s+LoginRadiusDefaults.idPrefix+"recaptcha_widget_verifyotp";t.verifyInstantOTP(e,O.util.parseQueryString(l),n,a,o,r,s)},function(e){a(I.setMappedMessage(e))},s)}},"passwordlessLogin")}else a([I.setMappedMessage(D.invalidPhone)])},I.resendOTPManually=function(e,o,t,i,n,a,r){var s=n+LoginRadiusDefaults.idPrefix+"recaptcha_widget_verifyotp",l=new LoginRadiusControllers(O,I);O.LRCheck2FA&&(O.options.twoFactorAuthentication||O.options.optionalTwoFactorAuthentication)&&!O.LRCheckRegistration?"false"===O.storage.getBrowserStorage(LoginRadiusDefaults.storedOTPAuth)?l.update2FAPhoneNumberController(e,o,t,i,n,a,r):l.resendOTP2FAController(e,t,i,s,o,n):l.resendOTPController(e,t,i,s,o,n)},I.updatePhoneNumber=function(t,i,n,a,e,r,s){O.LRCheck2FA&&(O.options.twoFactorAuthentication||O.options.optionalTwoFactorAuthentication)&&(O.checkPhoneNumberSchema[0].name="phoneNo2FA"),a=a||LoginRadiusDefaults.classPrefix,document.getElementsByName(a+"showQRcode")[0]&&(LoginRadiusDefaults.innerHTML=!0);var o=e||"updatePhone";I.createForm(O.checkPhoneNumberSchema,o,t,function(e){var o=new LoginRadiusControllers(O,I);-1===e.indexOf("phone=")&&(O.options.twoFactorAuthentication||O.options.optionalTwoFactorAuthentication)?o.update2FAPhoneNumberController(e,t,i,n,a,r,s):o.updatePhoneNumberController(e,t,i,n,a,r,s)},function(e){n(e)},a)},I.pingForSmartLogin=function(o,t,i){var n=O.options.autoLoginPingInterval||O.options.smartLoginPingInterval,a=O.options.autoLoginPingCount||O.options.smartLoginPingCount;O.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/smartlogin/ping?apiKey="+O.options.apiKey+"&clientGuid="+o,"",function(e){1139===e.ErrorCode||1140===e.ErrorCode?setTimeout(function(){LoginRadiusDefaults.pingCount<a&&(I.pingForSmartLogin(o,t,i),LoginRadiusDefaults.pingCount++)},1e3*n):e.ErrorCode&&1139!==e.ErrorCode?(i(e),LoginRadiusDefaults.pingCount=0):(LoginRadiusDefaults.pingCount=0,t(e))},"pingSmartLogin")},I.addChangeEventHandler=function(c,e,o,u){O.util.addEvent("change",document.getElementById(u+"registration-"+e.name),function(e){O.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/registrationdata/"+o.DataSource+"?apiKey="+O.options.apiKey+"&parentId="+this.value,"",function(e,o){var t=document.getElementById(u+"registration-"+e.name);if(o.ErrorCode)for(var i=1;i<t.options.length;i++)t.options[i]=null;else for(var n=0;n<o.length;n++)if(0===n&&1<t.options.length){for(var a=1;a<t.options.length;a++)t.options[a]=null;var r=document.createElement("option");r.setAttribute("value",o[n].Id),r.appendChild(document.createTextNode(o[n].Key)),t.appendChild(r)}else{var s=document.createElement("option");s.setAttribute("value",o[n].Id),s.appendChild(document.createTextNode(o[n].Key)),t.appendChild(s)}for(var l=0;l<e.children.length;l++)I.addChangeEventHandler(c,e,e.children[l],u)},"registration",o)})},I.createFormFields=function(e,i,u,o,t,n,a){var d;a=a||function(){};function r(e){var o=Math.random(),t=this.value,i=O.util.elementById(u+"-password-strength-meter"),n=O.util.elementById(u+"-password-strength-text");n.innerHTML="";var a=0;0<t.length&&(a++,t.match(/[a-z]/)&&t.match(/[A-Z]/)&&a++,t.match(/\d+/)&&a++,t.match(/.[!,@,#,$,%,^,&,*,?,_,~,-,(,)]/)&&a++,12<t.length&&a++),i.value=a;var r=document.getElementsByClassName(u+"-password");if(0<r.length)for(var s=0;s<r.length;s++)r[s].parentNode.removeChild(r[s]);var l=O.util.elementById(o)?O.util.elementById(o):document.createElement("style");l.type="text/css",l.id=o,l.setAttribute("class",u+"-password");var c=-1!==navigator.userAgent.indexOf("Firefox");l.innerHTML=c?"#"+u+"-password-strength-meter::-moz-meter-bar { background: "+d[a].color+" !important; }":"#"+u+"-password-strength-meter::-webkit-meter-optimum-value { background: "+d[a].color+" !important; }",document.body.appendChild(l),""!==t&&0<a?(n.innerHTML="Strength: "+d[a].Message,n.style.color=""):""!==t&&(n.innerHTML=d[a].Message,n.style.color=d[a].color)}function s(e){""!==this.value.trim()&&new LoginRadiusControllers(O,I).checkPhoneNumberAvailabilityController("phone="+this.value,function(e){if(e.IsExist)for(var o=0;o<i.childNodes.length;o++)-1!==i.childNodes[o].getAttribute("class").indexOf("phoneid")&&(i.childNodes[o].childNodes[2].innerHTML="phone already exists, enter unique phone number");else for(var t=0;t<i.childNodes.length;t++)-1!==i.childNodes[t].getAttribute("class").indexOf("phoneid")&&(i.childNodes[t].childNodes[2].innerHTML="")},a)}for(var l,c,p,m=0;m<e.length;m++)if(e[m]){var g;switch(I.setValidation(e[m]),e[m].rules&&""!==e[m].rules&&-1<e[m].rules.indexOf("custom_validation")&&-1===e[m].rules.indexOf("callback_custom_validation")&&(e[m].rules=e[m].rules.replace(/custom_validation\b/g,"callback_custom_validation")),o[m]={},o[m].name=e[m].name,o[m].display=e[m].display,o[m].rules=e[m].rules,e[m].type){case"text":g=document.createElement("textarea");break;case"html":case"captcha":g=document.createElement("div");break;case"password":(g=document.createElement("input")).type="password";break;case"hidden":(g=document.createElement("input")).type="hidden",g.value=e[m].value||"";break;case"option":g=document.createElement("select");var f=document.createElement("option");if(f.appendChild(document.createTextNode("-- select --")),f.setAttribute("value",""),g.appendChild(f),null==e[m].DataSource&&null!=e[m].options){for(var h=0;h<e[m].options.length;h++){var v=document.createElement("option");v.setAttribute("value",e[m].options[h].value),"country"===e[m].name&&v.setAttribute("value",e[m].options[h].value+"|"+e[m].options[h].text),v.appendChild(document.createTextNode(e[m].options[h].text)),g.appendChild(v)}O.defaultOptionField[e[m].name]&&(g.value=O.defaultOptionField[e[m].name])}break;case"multi":(g=document.createElement("input")).type="checkbox";break;case"email":(g=document.createElement("input")).type="email";break;case"button":(g=document.createElement("input")).type="button",g.value=e[m].display;break;case"image":(g=document.createElement("img")).src=e[m].value,g.type="image";break;default:(g=document.createElement("input")).type="text"}if(e[m].title&&(g.title=e[m].title),e[m].disabled&&(g.disabled=e[m].disabled),I.setAttribute(e[m],g),e[m].placeholder&&(g.placeholder=e[m].placeholder),e[m].value&&("multi"===e[m].type?g.checked=!0:g.value=e[m].value),"html"===e[m].type){var y=document.createElement("div");y.setAttribute("class",t+"-form-element-content content-"+n+e[m].name),y.innerHTML=e[m].html,e[m].event&&O.util.addEvent(e[m].event,y,e[m].eventCallback),i.appendChild(y)}else if("captcha"===e[m].type){var w=document.createElement("div");if(w.setAttribute("class",t+"-form-element-content content-"+n+e[m].name),w.innerHTML=e[m].html,O.options.formValidationMessage){var k=document.createElement("div");k.setAttribute("id","validation-"+n+u+"-"+e[m].name),k.setAttribute("class",t+"validation-message validation-"+n+e[m].name),w.appendChild(k)}i.appendChild(w)}else{if(g.setAttribute("name",e[m].name),e[m].name&&("phoneid"===e[m].name.toLowerCase()||"phone"===e[m].name.toLowerCase())&&O.options.existPhoneNumber&&"registration"===u&&O.util.addEvent("blur",g,s),"emailid"===e[m].name&&O.util.addEvent("keyup",g,function(e){32===e.keyCode&&(this.value=this.value.trim())}),g.setAttribute("id",n+u+"-"+e[m].name),e[m].event&&O.util.addEvent(e[m].event,g,e[m].eventCallback),O.eventsName[g.id]){var C=O.eventsName[g.id];if(O.util.isArray(C))for(var L=0;L<C.length;L++)C[L].event&&C[L].eventCallback&&O.util.addEvent(C[L].event,g,C[L].eventCallback);else O.util.addEvent(C.event,g,C.eventCallback)}if("hidden"===e[m].type)i.appendChild(g);else if("button"===e[m].type){var T=document.createElement("div");T.setAttribute("class",t+"-form-element-content content-"+n+e[m].name),T.appendChild(g),i.appendChild(T)}else{var S=document.createElement("label");S.setAttribute("for",n+u+"-"+e[m].name),S.innerHTML=e[m].display,g.setAttribute("class",t+e[m].type+" "+n+e[m].name),e[m].rules&&-1!==e[m].rules.indexOf("required")&&(g.className+=" lr-required");var b=document.createElement("div");if(b.setAttribute("class",t+"-form-element-content content-"+n+e[m].name),"multi"===e[m].type?(b.appendChild(g),b.appendChild(S)):(b.appendChild(S),b.appendChild(g)),e[m].style&&0<e[m].style.length)for(var R=0;R<e[m].style.length;R++)b.style[e[m].style[R].key]=e[m].style[R].value;if(O.options.formValidationMessage){var P=document.createElement("div");P.setAttribute("id","validation-"+n+u+"-"+e[m].name),P.setAttribute("class",t+"validation-message validation-"+n+e[m].name),b.appendChild(P)}if(O.options.displayPasswordStrength&&("password"===g.name||"newpassword"===g.name)&&("registration"===u||"resetpassword"===u||"setpassword"===u||"changepassword"===u||"socialRegistration"===u||"loginRequiredFieldsUpdate"===u)){O.options.passwordLength&&O.options.passwordLength.min,O.options.passwordLength&&O.options.passwordLength.max;if(e[m].rules)for(var E=e[m].rules.split("|"),A=0;A<E.length;A++)-1<E[A].indexOf("min_length")?E[A].substring(11,E[A].length-1):-1<E[A].indexOf("max_length")&&E[A].substring(11,E[A].length-1);var F=document.createElement("meter");F.setAttribute("max","4"),F.setAttribute("id",u+"-password-strength-meter");var D=document.createElement("div");D.setAttribute("id",u+"-password-strength-text"),g.parentNode.appendChild(F),g.parentNode.appendChild(D),void 0,l={0:"worst",1:"bad",2:"weak",3:"good",4:"strong",5:"secure"},c={0:"#dd514c",1:"orange",2:"yellow",3:"#5eb95e",4:"blue",5:"violet"},p={0:"Worst",1:"Bad",2:"Weak",3:"Good",4:"Strong",5:"Secure"},d=function(){var e=[],o=O.passwordMeterConfiguration;for(var t in l)o[t]&&o[t].case?o[t].case.toLowerCase()===l[t]&&e.push({color:o[t].color?o[t].color:c[t],Message:o[t].message?o[t].message:p[t]}):e.push({color:c[t],Message:p[t]});return e}(),O.util.addEvent("keyup",g,r)}i.appendChild(b)}}}},I.setToken=function(e){LRNameSpace.cookies.setItem(LoginRadiusDefaults.tokenCookie,e,"",O.options.appPath)},I.resetGoogleCaptcha=function(e,o){if(O.options.optionalRecaptchaConfiguration.IsEnabled&&"registration"!==e){var t=O.util.elementById(o,!0);window.grecaptcha&&t&&""!==t.innerHTML&&grecaptcha.reset(window[o+"lr_recaptcha_widgets_idprefix"])}},I.createForm=function(e,u,o,d,p,m){var t,g=m||LoginRadiusDefaults.idPrefix,f=m||LoginRadiusDefaults.classPrefix;if(O.LRPrefix=m+"##"+LoginRadiusDefaults.idPrefix,"Captcha"===O.options.loginLockedType&&"registration"!==u||O.options.optionalRecaptchaConfiguration.IsEnabled){var i=O.options.optionalRecaptchaConfiguration.Apis;("Captcha"===O.options.loginLockedType||i&&function(e,o){var t=e.toLowerCase();return"changepassword"===t&&o.PutChangePassword||("profileeditor"===t||"loginRequiredFieldsUpdate"===t||"progressiveProfiling"===t||"socialRegistration"===t)&&o.PutUpdateProfile||"forgotpassword"===t&&(O.options.phoneLogin&&o.PostForgotPasswordByPhone&&o.PostForgotPasswordByEmail||!O.options.phoneLogin&&o.PostForgotPasswordByEmail)||"login"===t&&(O.options.usernameLogin&&o.PostLoginByUserNameAndPassword&&O.options.phoneLogin&&o.PostLoginByEmailAndPassword&&o.PostLoginByPhoneAndPassword||O.options.phoneLogin&&o.PostLoginByEmailAndPassword&&o.PostLoginByPhoneAndPassword||!O.options.phoneLogin&&O.options.usernameLogin&&o.PostLoginByUserNameAndPassword||!O.options.usernameLogin&&!O.options.phoneLogin&&o.PostLoginByEmailAndPassword)}(u,i))&&(t=m+LoginRadiusDefaults.idPrefix+"recaptcha_widget_"+u.toLowerCase(),O.util.addRecaptchaJS(),O.util.captchaSchema(t,e))}if(O.$hooks.call("beforeFormRender",u,e),LoginRadiusDefaults._uuidFormat.test(O.options.apiKey)){if(LoginRadiusDefaults.isRegFormSchemaLock=!1,LoginRadiusDefaults.isSecurityFormSchemaLock=!1,I.setCustomLabel(e),I.setPlaceholder(e),I.setCustomTitle(e),0<e.length){var n=[],h=document.createElement("form");h.setAttribute("name",g+u),h.setAttribute("method","POST"),I.createFormFields(e,h,u,n,f,g,p);var a,r=document.createElement("input"),s=O.buttonsName[u.toLowerCase()]||w[u.toLowerCase()],l=w[u.toLowerCase()].toLowerCase().replace(/ /g,"-");if(r.type="submit",r.value=s,r.id=g+"submit-"+l,r.setAttribute("class",f+"submit submit-"+g+l),O.options.disableButtonOnsubmit)O.$hooks.register("eventCalls",function(e){window.lrpasswordlessloginotp||window.lrpasswordlesslogin||(a=e)}),O.$hooks.register("startProcess",function(e){a===u&&(r.disabled=!0)}),O.$hooks.register("xhrEndWithError",function(e){a===u&&(r.disabled=!1)}),O.$hooks.register("xhrEndWithSuccess",function(e){a===u&&O.options.enableSubmitOnSuccess&&(r.disabled=!1)});h.appendChild(r),O.options.passwordlessLogin&&"login"===u&&C("passwordlessloginbuttonlabel",h,r,g,f),O.options.passwordlessLoginOTP&&"login"===u&&C("passwordlessLoginOTPButtonLabel",h,r,g,f),O.util.addHTMLContent(o,h,LoginRadiusDefaults.innerHTML),O.$hooks.call("afterFormRender",u,o,f,h),LoginRadiusDefaults.innerHTML=!1;var c,v=new FormValidator(g+u,n,function(e,o){var t=document.getElementsByTagName("form"),i="";if(t[g+u])i=t[g+u];else if("object"==typeof t)for(var n=0;n<t.length;n++)if(t[n].name===g+u){i=t[n];break}O.currentLRContainer=i.parentElement.id,O.$hooks.call("eventCalls",u,f),O.mergeFormErrors&&0<O.mergeFormErrors.length&&(e=O.util.mergeObjects(e,O.mergeFormErrors));for(var a=O.util.elementsByClass(f+"validation-message"),r=0;r<a.length;r++)a[r].innerHTML="";var s=m+g+"recaptcha_widget";s+="_"+u.toLowerCase();var l=O.util.elementById(s+"_tencent");if(O.options.invisibleRecaptcha&&(window.onCaptchaSubmit=function(e){d(O.util.serialize(h)),grecaptcha.reset(window[s+"lr_recaptcha_widgets_idprefix"])}),l&&"none"!==l.style.display&&(O.options.tencentCaptcha||O.options.tencentCaptchaAsFallback&&!window.grecaptcha)&&0==e.length&&l.click(),0<e.length){O.$hooks.call("afterValidation",u);for(var c=0;c<e.length;c++)if(e[c].Id===g+""+u+"-password"&&"login"===u&&(O.options.passwordlessLogin&&window.lrpasswordlesslogin||O.options.passwordlessLoginOTP&&window.lrpasswordlessloginotp)){if(1===e.length||0===e.length)return k(h,d,s),I.resetGoogleCaptcha(u,s),!0}else O.options.formValidationMessage&&"resettoken"!==e[c].Name&&(O.util.elementById("validation-"+g+u+"-"+e[c].Name).innerHTML=e[c].Message);O.options.formValidationMessage||(p(e),I.resetGoogleCaptcha(u,s))}else k(h,d,s),I.resetGoogleCaptcha(u,s);o&&o.preventDefault?o.preventDefault():event&&(event.returnValue=!1)});if(O.validationMessages&&0<O.validationMessages.length)for(var y=0;y<O.validationMessages.length;y++)v.setMessage(O.validationMessages[y].rule,O.validationMessages[y].message),"valid_date"!==O.validationMessages[y].rule&&"callback_valid_date"!==O.validationMessages[y].rule||(c=O.validationMessages[y].message);v.registerCallback("valid_date",function(e){return function(e){var o=e.split("/");-1!==e.indexOf("-")&&(o=e.split("-"));var t=parseInt(o[1],10),i=parseInt(o[0],10),n=parseInt(o[2],10);if(n<1e3||3e3<n||0===i||12<i)return!1;var a=[31,28,31,30,31,30,31,31,30,31,30,31];return(n%400==0||n%100!=0&&n%4==0)&&(a[1]=29),0<t&&t<=a[i-1]}(e)}).setMessage("valid_date",c||"The %s field must contain a valid date."),v.registerCallback("custom_validation",function(e,o){return function(e,o){o=(o=o.split("###")[0]).split("or").join("|");try{return!!new RegExp(o,"g").test(e)}catch(e){return O.log("Invalid custom validation regex expression"),!1}}(e,o)}).setMessage("custom_validation","The %s field is not valid."),O.Validator=v}}else O.log("apiKey is not in valid guid format.");O.options.optionalRecaptchaConfiguration.IsEnabled&&"registration"!==u&&O.util.renderV2Recaptcha(t,!0)},I.isValidToken=function(e,o){return!!e||(o([I.setMappedMessage(D.tokenValid)]),!1)},I.checkForLatestPrivacyPolicy=function(e){for(var o=O.options.privacyPolicyConfiguration.PrivacyPolicies,t=(new Date).getTime(),i={},n=0;n<o.length;n++)new Date(o[n].StartDateTime).getTime()<t&&(O.util.isEmpty(i)||!O.util.isEmpty(i)&&new Date(i.StartDateTime).getTime()<new Date(o[n].StartDateTime).getTime())&&(i=o[n]);return i.Version===e.PrivacyPolicy.Version}}function LoginRadiusControllers(k,C){var L=LoginRadiusDefaults.messages,T=this;function n(e,o,t,i,n){o?k.util.ajaxCall(e,LoginRadiusDefaults.apiDomain+"/auth/customobject/"+t+"?apiKey="+k.options.apiKey+"&access_token="+o+"&objectname="+k.options.customObjectName,"",function(e){e.ErrorCode?n(C.loginRadiusErrorTojsError(e)):i(e)},"CustomObject"):n([C.setMappedMessage(L.twofaTokenValid)])}T.handleFeatures=function(e,o,t,i,n,a,r){var s=e.Profile;"string"!=typeof o&&(o=k.util.jsonToQueryString(o)),i&&k.options.periodicPasswordReset&&s.PasswordExpirationDate&&new Date(s.PasswordExpirationDate)<=new Date?(C.setPasswordRule(k.changePasswordFormSchema[1]),C.setPasswordRule(k.changePasswordFormSchema[2]),i(s,e)):t&&(k.options.askRequiredFieldForTraditionalLogin||LoginRadiusDefaults.autoFilledFieldforPasswordLesLogin)?function(e,o,t,i,n,a){var r,s;k.storage.setBrowserStorage(LoginRadiusDefaults.storedTokenName,o.access_token),r=k.options,s=(s=JSON.parse(JSON.stringify(r))).RegistrationFormSchema,e.IsDeleted?a(C.loginRadiusErrorTojsError(e)):(k.options.autoFilledFieldForTraditional&&k.$hooks.register("beforeFormRender",function(e,o){if("loginRequiredFieldsUpdate"===e){var t=k.util.findInSchema(o,"name","emailid");t&&t.value&&(t.disabled=!0);var i=k.util.findInSchema(o,"name","phoneid");i&&i.value&&(i.disabled=!0)}}),k.registrationFormSchema=C.mapSchema(s,e,k.options.autoFilledFieldForTraditional),0<k.registrationFormSchema.length?(C.setPasswordRule(k.util.findInSchema(s,"name","password")),C.setPasswordRule(k.util.findInSchema(s,"name","confirmpassword")),k.$hooks.call("registrationSchemaFilter",s,e),i(e,o,o.access_token,t,n,a)):C.loginHandleToken(o,t,n,a))}(s,e,o,t,n,a):C.loginHandleToken(e,o,n,a,r)},T.verifyOTPController=function(o,e,t,i,n,a){var r=LoginRadiusDefaults.apiDomain+"/auth/phone/otp?apiKey="+k.options.apiKey+"&otp="+o.otp+"&smsTemplate="+k.options.smsTemplateWelcome;o.haveToken&&(r+="&access_token="+k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName)),o.onetouchloginflag&&(r=LoginRadiusDefaults.apiDomain+"/auth/onetouchlogin/phone/verify?apiKey="+k.options.apiKey+"&otp="+o.otp+"&smsTemplate="+k.options.smsTemplateOneTouchLoginWelcome),k.util.ajaxCall("put",r,e,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):o.onetouchloginflag&&!k.options.askRequiredFieldsOnPasswordLessLogin?C.loginHandleToken(e,"",t,i,"",!0):e.access_token?(LoginRadiusDefaults.autoFilledFieldforPasswordLesLogin=!0,T.handleFeatures(e,o,a,n,t,i)):t(e,o)},"verifyOTP")},T.updateSecurityQuestionController=function(e,o,t){for(var i=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),n=k.util.parseQueryString(e),a=0;a<k.options.securityQuestionsCount;a++)n[n["securityQuestion"+a]]=n["securityAnswer"+a],delete n["securityQuestion"+a],delete n["securityAnswer"+a];var r={SecurityQuestionAnswer:n};C.isValidToken(i,t)&&k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/account?apikey="+k.options.apiKey+"&access_token="+i,r,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"updateSecurityQuestion")},T.resetTwoFactorAuthenticationController=function(o,t,i){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),n={};n[o]=!0,C.isValidToken(e,i)&&k.util.ajaxCall("delete",LoginRadiusDefaults.apiDomain+"/auth/account/2FA/authenticator?apikey="+k.options.apiKey+"&access_token="+e,n,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,o)},"resetTwoFactorAuthentication")},T.forgotPasswordController=function(t,i,n,a,r){var e=k.options.forgotPasswordUrl||k.options.resetPasswordUrl;k.util.ajaxCall("post",LoginRadiusDefaults.apiDomain+"/auth/password?apiKey="+k.options.apiKey+"&resetPasswordUrl="+e+"&emailTemplate="+k.options.resetPasswordEmailTemplate,t,function(e){if(e.ErrorCode)a(C.loginRadiusErrorTojsError(e));else{var o=k.util.parseQueryString(t);n(e,o),k.options.otpEmailVerification&&!k.options.verifyEmailByOTP&&C.resetPassword(i,n,a,r,o)}},"forgotPassword")},T.loginController=function(o,t,i,n,a,r,s,l,c){k.options.verificationEmailTemplate=k.options.emailTemplate||k.options.verificationEmailTemplate;var e="emailTemplate="+k.options.verificationEmailTemplate+"&verificationUrl="+k.options.verificationUrl;k.options.phoneLogin&&(e+="&smsTemplate="+k.options.smsTemplatePhoneVerification),k.options.riskBasedAuthentication&&(e+="&RbaOneclickEmailTemplate="+k.options.rbaOneclickEmailTemplate+"&RbaOTPSmsTemplate="+k.options.rbaOTPSmsTemplate+"&RbaCityEmailTemplate="+k.options.rbaCityEmailTemplate+"&RbaCountryEmailTemplate="+k.options.rbaCountryEmailTemplate+"&RbaBrowserEmailTemplate="+k.options.rbaBrowserEmailTemplate+"&RbaIpEmailTemplate="+k.options.rbaIpEmailTemplate+"&RbaCitySmsTemplate="+k.options.rbaCitySmsTemplate+"&RbaCountrySmsTemplate="+k.options.rbaCountrySmsTemplate,e+="&RbaBrowserSmsTemplate="+k.options.rbaBrowserSmsTemplate+"&RbaIpSmsTemplate="+k.options.rbaIpSmsTemplate),("string"==typeof(o=k.util.checkPhoneOrEmailLogin(o))||o instanceof String)&&(o=k.util.parseQueryString(o)),k.options.duplicateEmailWithUniqueUsername&&(delete o.email,delete o.phoneid);var u=LoginRadiusDefaults.apiDomain+"/auth/login?apiKey="+k.options.apiKey+"&loginUrl="+k.options.loginUrl+"&"+e;o["g-recaptcha-response"]&&(u+="&g-recaptcha-response="+o["g-recaptcha-response"],delete o["g-recaptcha-response"]),o.qq_captcha_randstr&&(u+="&qq_captcha_randstr="+o.qq_captcha_randstr,delete o.qq_captcha_randstr),o.qq_captcha_ticket&&(u+="&qq_captcha_ticket="+o.qq_captcha_ticket,delete o.qq_captcha_ticket),k.util.ajaxCall("post",u,o,function(e){k.options.stayLogin&&k.storage.setBrowserStorage("lr-rememberme",o.stayLogin),e.ErrorCode?("970"==e.ErrorCode&&k.options.otpEmailVerification&&!k.options.verifyEmailByOTP?C.otpEmailVerification(t,i,n,s,o):"1167"==e.ErrorCode&&(e.PhoneId||o.phone)?(delete o.email,o.phone=e.PhoneId||o.phone,T.loginOTPController(o,t,i,n,s,"no")):k.options.phoneLogin&&"1066"==e.ErrorCode&&(C.verifyOTP=l||C.verifyOTP,C.resendOTP=c||C.resendOTP,C.verifyOTP(o,t,i,n,s,a,r),C.resendOTP(o,t,i,n,s,a,r)),n(C.loginRadiusErrorTojsError(e))):T.handleFeatures(e,o,r,a,i,n,s)},"login")},T.loginOTPController=function(t,i,n,a,r,e){var s=t=k.util.checkPhoneOrEmailLogin(t);if(("string"==typeof t||t instanceof String)&&(s=k.util.parseQueryString(t)),s.email||s.username)C.sendInstantSignInLink(t,n,a,i,r);else{k.$hooks.register("beforeFormRender",function(e,o){k.util.findInSchema(o,"name","resendotp")||o.push({type:"button",name:"resendotp",display:"Resend OTP",rules:"",permission:"r",event:"click",eventCallback:function(e){T.loginOTPController(t,i,n,a,r)}})});function o(){var e=k.otpSchema;C.createForm(e,"otp",i,function(e){var o=r+LoginRadiusDefaults.idPrefix+"recaptcha_widget_verifyotp";T.verifyInstantOTP(e,s,n,a,o,i,r)},function(e){a(C.setMappedMessage(e))},r)}if(e)o();else{var l=k.options.smsTemplateInstantOTPLogin||k.options.passwordlessLoginSMSTemplate;k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/otp?apiKey="+k.options.apiKey+"&phone="+s.phone+"&smsTemplate="+l,"",function(e){e.ErrorCode?a(C.loginRadiusErrorTojsError(e)):(n(e),o())},"loginOTP")}}},T.login2FAController=function(t,r,s,l,c,u,d,p,m,g){k.LRCheck2FA=!0,t=k.util.checkPhoneOrEmailLogin(t);var f=function(t,e,o){e=e||"",o=o||"";var i=k.util.getButtonAttribute("sendotp",c);if(k.options.googleAuthentication&&(!e&&k.options.twoFactorAuthentication||o)&&C.showQRCode(t,r,s,l,c,u,d),e||o||!k.options.twoFactorAuthentication){if(!o&&k.options.twoFactorAuthentication||k.options.optionalTwoFactorAuthentication&&!e&&""!==t.SecondFactorAuthentication.OTPPhoneNo&&null!=t.SecondFactorAuthentication.OTPPhoneNo||e)if(o)if(c=c||LoginRadiusDefaults.classPrefix,k.options.googleAuthentication){var n=document.getElementsByName(c+"showQRcode")[0];n&&n.appendChild(i)}else k.util.addHTMLContent(r,i);else C.verifyOTP=m||C.verifyOTP,C.resendOTP=g||C.resendOTP,C.verifyOTP(t,r,s,l,c,u,d),C.resendOTP(t,r,s,l,c,u,d)}else C.updatePhoneNumber=p||C.updatePhoneNumber,C.updatePhoneNumber(r,s,l,c,"",u,d);if(e||o){var a=k.util.getButtonAttribute("backupcodebutton",c);k.util.addHTMLContent(r,a,!0),k.util.addEvent("click",a,function(e){!function(e,o,t,i,n,a){C.createForm(k.backupCodeFormSchema,"backupcode",e,function(e){T.backupCodeController(e,o,t,n,a)},function(e){t(e)},i)}(r,s,l,c,u,d);var o=k.util.getButtonAttribute("backupcodebackbutton",c);k.util.addHTMLContent(r,o,!0),k.util.addEvent("click",o,function(e){f(t,t.SecondFactorAuthentication.IsOTPAuthenticatorVerified,t.SecondFactorAuthentication.IsGoogleAuthenticatorVerified)})})}k.util.addEvent("click",i,function(e){var o="phoneNo2FA="+t.SecondFactorAuthentication.OTPPhoneNo;C.resendOTPManually(o,r,s,l,c,u,d),C.verifyOTP=m||C.verifyOTP,C.resendOTP=g||C.resendOTP,C.verifyOTP(t,r,s,l,c,u,d),C.resendOTP(t,r,s,l,c,u,d)})},e=LoginRadiusDefaults.apiDomain+"/auth/login/2FA/";k.options.verificationEmailTemplate=k.options.emailTemplate||k.options.verificationEmailTemplate;var o,i="post";o=window.lrbackupcode?(e=e+"backupcode?apiKey="+k.options.apiKey+"&"+t,i="get",""):(e=e+"?apiKey="+k.options.apiKey+"&loginUrl="+k.options.loginUrl+"&emailTemplate="+k.options.verificationEmailTemplate+"&verificationUrl="+k.options.verificationUrl+"&smsTemplate="+k.options.smsTemplateWelcome+"&smsTemplate2FA="+k.options.smsTemplate2FA,k.util.parseQueryString(t)),k.util.ajaxCall(i,e,o,function(e){if(k.options.stayLogin&&k.storage.setBrowserStorage("lr-rememberme",k.util.getQueryParameterByName("stayLogin",t)),e.ErrorCode){if(k.options.phoneLogin&&"1066"==e.ErrorCode){var o="phone="+k.util.getQueryParameterByName("phone",t);o+="&noPhoneVerified=false",k.options.optionalTwoFactorAuthentication=!1,k.options.twoFactorAuthentication=!1,C.verifyOTP=m||C.verifyOTP,C.resendOTP=g||C.resendOTP,C.verifyOTP(o,r,s,l,c,u,d),C.resendOTP(o,r,s,l,c,u,d)}l(C.loginRadiusErrorTojsError(e))}else e.SecondFactorAuthentication?(k.storage.setBrowserStorage(LoginRadiusDefaults.storedTwoFAToken,e.SecondFactorAuthentication.SecondFactorAuthenticationToken),k.storage.setBrowserStorage(LoginRadiusDefaults.storedOTPAuth,e.SecondFactorAuthentication.IsOTPAuthenticatorVerified),"00000000-0000-0000-0000-000000000000"===e.access_token&&f(e,e.SecondFactorAuthentication.IsOTPAuthenticatorVerified,e.SecondFactorAuthentication.IsGoogleAuthenticatorVerified)):T.handleFeatures(e,t,d,u,s,l,c)},"login")},T.resendOTPController=function(e,o,t,i,n,a){var r=e.updatePhone?k.options.smsTemplateUpdatePhone:k.options.smsTemplatePhoneVerification,s=LoginRadiusDefaults.apiDomain+"/auth/phone/otp?apiKey="+k.options.apiKey+"&smsTemplate="+r,l="post";e.onetouchloginflag&&(l="get","string"!=typeof e&&(e=k.util.jsonToQueryString(e)),s=LoginRadiusDefaults.apiDomain+"/auth/onetouchlogin/phone?apikey="+k.options.apiKey+"&"+e+"&smstemplate="+k.options.smsTemplatePhoneVerification),k.util.ajaxCall(l,s,e,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):(k.log(L.otpSent),o(e))},"resendOTP")},T.resendOTP2FAController=function(e,o,t,i,n,a){var r=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTwoFAToken),s=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);s&&!k.LRCheckLogin?k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/account/2FA?apiKey="+k.options.apiKey+"&access_token="+s+"&smsTemplate="+k.options.smsTemplate2FA,e,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):(k.log(L.otpSent),o(e))},"resendOTP"):r?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/2FA/resend?apiKey="+k.options.apiKey+"&SecondFactorAuthenticationToken="+r+"&smsTemplate2FA="+k.options.smsTemplate2FA,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):k.log(L.otpSent)},"resendOTP"):t([C.setMappedMessage(L.twofaTokenValid)])},T.verify2FAOTPController=function(o,t,i,n,a){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),r=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTwoFAToken);e&&!k.LRCheckLogin?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/2FA/Verification?apiKey="+k.options.apiKey+"&access_token="+e+"&"+o+"&smsTemplate="+k.options.smsTemplate2FAWelcome,"",function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,o)},"verifyOTP##twofaotp"):r?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/2FA/Verification?apiKey="+k.options.apiKey+"&SecondFactorAuthenticationToken="+r+"&"+o+"&smsTemplate2FA="+k.options.smsTemplate2FAWelcome,"",function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):T.handleFeatures(e,o,a,n,t,i)},"verifyOTP##twofaotp"):i([C.setMappedMessage(L.twofaTokenValid)])},T.backupCodeController=function(o,t,i,n,a){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTwoFAToken);e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/2FA/backupcode?apiKey="+k.options.apiKey+"&SecondFactorAuthenticationToken="+e+"&"+o+"&smsTemplate2FA="+k.options.smsTemplate2FAWelcome,"",function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):T.handleFeatures(e,o,a,n,t,i)},"login"):i([C.setMappedMessage(L.twofaTokenValid)])},T.checkPhoneNumberAvailabilityController=function(e,o,t){k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/phone?apiKey="+k.options.apiKey+"&"+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"checkPhone")},T.update2FAPhoneNumberController=function(o,t,i,n,a,r,s,l,c){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTwoFAToken),u=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);u&&!k.LRCheckLogin?k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/account/2FA?apiKey="+k.options.apiKey+"&access_token="+u+"&smsTemplate="+k.options.smsTemplate2FA,o,function(e){e.ErrorCode?n(C.loginRadiusErrorTojsError(e)):(C.verifyOTP=l||C.verifyOTP,C.resendOTP=c||C.resendOTP,C.verifyOTP(o,t,i,n,a,r,s),C.resendOTP(o,t,i,n,a,r,s),i(e,o))},"updatePhone"):e?k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/login/2FA/?apiKey="+k.options.apiKey+"&SecondFactorAuthenticationToken="+e+"&smsTemplate2FA="+k.options.smsTemplate2FA,o,function(e){e.ErrorCode?n(C.loginRadiusErrorTojsError(e)):(i(e,o),C.verifyOTP=l||C.verifyOTP,C.resendOTP=c||C.resendOTP,C.verifyOTP(o,t,i,n,a,r,s),C.resendOTP(o,t,i,n,a,r,s))},"login"):n([C.setMappedMessage(L.twofaTokenValid)])},T.updatePhoneNumberController=function(o,t,i,n,a,r,s,l,c){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);C.isValidToken(e,n)&&k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/phone?apiKey="+k.options.apiKey+"&access_token="+e+"&smsTemplate="+k.options.smsTemplateUpdatePhone,o,function(e){e.ErrorCode?n(C.loginRadiusErrorTojsError(e)):(C.verifyOTP=l||C.verifyOTP,C.resendOTP=c||C.resendOTP,C.verifyOTP(o+"&haveToken=true",t,i,n,a,r,s),C.resendOTP(o+"&updatePhone=true",t,i,n,a,r,s),i(e,o))},"updatePhone")},T.resetPasswordByPhoneController=function(o,t,i,e,n){k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/password/otp?apiKey="+k.options.apiKey+"&smsTemplate="+k.options.smsTemplateWelcome,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,o)},"resetPassword")},T.forgotPasswordbyPhoneController=function(o,t,i,n,a,r){k.util.ajaxCall("post",LoginRadiusDefaults.apiDomain+"/auth/password/otp?apiKey="+k.options.apiKey+"&smsTemplate="+k.options.smsTemplateForgot,o,function(e){e.ErrorCode?n(C.loginRadiusErrorTojsError(e)):(i(e,o),(r||C.resetPassword)(t,i,n,a))},"forgotPassword")},T.registrationController=function(i,n,a,r,s,e,l,c){k.LRCheckRegistration=!0;var o=i;k.lrApiFramework||(o=C.mapRegistrationSchema(e,i));var t="emailTemplate="+k.options.verificationEmailTemplate+"&verificationUrl="+k.options.verificationUrl+"&welcomeEmailTemplate="+k.options.welcomeEmailTemplate;k.options.phoneLogin&&(t+="&smsTemplate="+k.options.smsTemplatePhoneVerification),k.options.preventVerificationEmail&&(t+="&options=PreventVerificationEmail");var u="";k.options.invisibleRecaptcha||k.options.v2Recaptcha||k.options.tencentCaptcha?u=LoginRadiusDefaults.apiDomain+"/auth/register/captcha?apiKey="+k.options.apiKey+"&"+t:k.options.sott?(u=LoginRadiusDefaults.apiDomain+"/auth/register?apiKey="+k.options.apiKey+"&"+t,k.options.enableHeaderSott?(k.options.sott=decodeURIComponent(k.options.sott),o.sottcheck=!0):u+="&sott="+k.util.encodedString(k.options.sott)):k.log("url is not set as sott option is not defined"),""!==u&&k.util.ajaxCall("post",u,o,function(o){if(o&&k.util.isObject(o)&&(o=k.util.keyslowerToUpperCamelCase(o)),o.ErrorCode)1049===o.ErrorCode?(r([C.setMappedMessage(L.invalidSott)]),k.log(o.Description)):r(C.loginRadiusErrorTojsError(o));else{function t(e){e.push({type:"button",name:"skip",display:"Skip",rules:"",permission:"r",event:"click",eventCallback:function(e){C.loginHandleToken(o,i,a,r)}})}if(k.options.phoneLogin&&-1!==i.indexOf("phoneid")){-1===k.util.findInSchema(k.registrationFormSchema,"name","phoneid").rules.indexOf("required")&&k.$hooks.register("beforeFormRender",function(e,o){"otp"!==e||k.util.findInSchema(o,"name","skip")||t(o)}),C.verifyOTP=l||C.verifyOTP,C.resendOTP=c||C.resendOTP,C.verifyOTP(i,n,a,r,s),C.resendOTP(i,n,a,r,s)}else{var e=k.util.parseQueryString(i);if(k.options.disabledEmailVerification||k.options.optionalEmailVerification)if(o.Data&&(delete(o=o.Data).Data,delete o.IsPosted),k.options.askRequiredFieldForTraditionalLogin=!1,k.options.otpEmailVerification&&!k.options.verifyEmailByOTP){k.$hooks.register("beforeFormRender",function(e,o){"otp"!==e||k.util.findInSchema(o,"name","skip")||t(o)});C.otpEmailVerification(n,function(e){e.access_token||C.loginHandleToken(o,i,a,r)},r,s,e)}else C.loginHandleToken(o,i,a,r);else a(o,e),k.options.otpEmailVerification&&!k.options.verifyEmailByOTP&&C.otpEmailVerification(n,a,r,s,e)}}},"registration")},T.periodicalPasswordRestController=function(e,o,t,i,n,a){k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/password?apiKey="+k.options.apiKey+"&access_token="+n.access_token,e,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):C.loginHandleToken(n,a,o,t)},"periodicPassword")},T.changePasswordController=function(o,t,i){k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/password/change?apiKey="+k.options.apiKey+"&access_token="+k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,k.util.parseQueryString(o))},"changePassword")},T.resendEmailVerificationController=function(o,t,i){k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/register?apiKey="+k.options.apiKey+"&verificationUrl="+k.options.verificationUrl+"&emailTemplate="+k.options.verificationEmailTemplate,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,k.util.parseQueryString(o))},"resendVerificationEmail")},T.addEmailController=function(o,t,i){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);C.isValidToken(e,i)&&k.util.ajaxCall("post",LoginRadiusDefaults.apiDomain+"/auth/email?apiKey="+k.options.apiKey+"&access_token="+e+"&verificationUrl="+k.options.verificationUrl+"&emailTemplate="+k.options.addEmailTemplate,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):(t(e,k.util.parseQueryString(o)),k.options.otpEmailVerification&&!k.options.verifyEmailByOTP&&C.otpEmailVerification(k.currentLRContainer,t,i,"",o))},"addEmail")},T.removeEmailController=function(o,t,i){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);C.isValidToken(e,i)&&k.util.ajaxCall("delete",LoginRadiusDefaults.apiDomain+"/auth/email?apiKey="+k.options.apiKey+"&access_token="+e,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):(t(e,k.util.parseQueryString(o)),k.options.otpEmailVerification&&!k.options.verifyEmailByOTP&&C.otpEmailVerification(k.currentLRContainer,t,i,"",o))},"removeEmail")},T.changeUsernameController=function(o,t,i){var e=k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);C.isValidToken(e,i)&&k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/username?apiKey="+k.options.apiKey+"&access_token="+e,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,k.util.parseQueryString(o))},"changeUsername")},T.resetPasswordController=function(o,t,i,e,n){o+="&welcomeEmailTemplate="+k.options.welcomeEmailTemplate+"&ResetPasswordEmailTemplate="+k.options.resetPasswordConfirmationEmailTemplate,k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/password/reset?apiKey="+k.options.apiKey,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,k.util.parseQueryString(o))},"resetPassword")},T.emailVerificationController=function(e,o,t,i,n,a){var r="get";if(e){var s=LoginRadiusDefaults.apiDomain+"/auth/email?apiKey="+k.options.apiKey+"&welcomeEmailTemplate="+k.options.welcomeEmailTemplate,l="";a?(r="put",l=e):s+="&verificationtoken="+e+"&url="+k.options.verificationUrl;var c="##otp";k.options.verifyEmailByOTP&&(c=""),k.util.ajaxCall(r,s,l,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):k.options.loginOnEmailVerification?null==e.Data?o(e):C.loginHandleToken(e.Data,"",o,t):k.options.logoutOnVerifyEmail?C.logout(o(e)):o(e)},"verifyEmail"+c)}else t(a?[L.notFound]:[L.vTokenError])},T.deleteUserConfirmController=function(e,o,t){e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/delete?apiKey="+k.options.apiKey+"&deletetoken="+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"deleteUserConfirm"):t([L.vTokenError])},T.checkEmailAvailabilityController=function(e,o,t){k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/email?apiKey="+k.options.apiKey+"&"+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"checkEmail")},T.checkUserNameAvailabilityController=function(e,o,t){k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/username?apiKey="+k.options.apiKey+"&"+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"checkUsername")},T.resetPasswordBySecurityQuestionController=function(o,t,i){var e=k.util.parseQueryString(o),n={};for(var a in e)"email"!==a&&"username"!==a&&"phone"!==a&&"password"!==a&&(n[a]=e[a],delete e[a]);e.securityanswer=n,k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/password/securityanswer/?apikey="+k.options.apiKey,e,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e,o)},"resetPasswordBySecurityQuestion")},T.getSecurityQuestionsController=function(e,o,t){var i="/auth/securityquestion/";-1!==e.indexOf("username")?i+="username?apiKey=":-1!==e.indexOf("phone")?i+="phone?apiKey=":i+="email?apiKey=",k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+i+k.options.apiKey+"&"+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(function(e){for(var o=[],t=0;t<e.length;t++){var i={};k.options.maskSensitiveInput?i.type="password":i.type="string",i.name=e[t].QuestionId,i.display=e[t].Question,i.rules="required",i.permission="r",o.push(i)}return o}(e))},"securityQuestion")},T.getBackupCodeController=function(e,o,t){e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/2FA/backupcode?apikey="+k.options.apiKey+"&access_token="+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"backupCode"):t([C.setMappedMessage(L.twofaTokenValid)])},T.resetBackupCodeController=function(e,o,t){e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/2FA/backupcode/reset?apikey="+k.options.apiKey+"&access_token="+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"backupCode"):t([C.setMappedMessage(L.twofaTokenValid)])},T.getSocialDataController=function(e,o,t,i,n){e?(i+="?access_token="+e,n&&(i=i+"&"+n),k.util.ajaxCall("get",LoginRadiusDefaults.socialApiDomain+i,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"socialAPI")):t([C.setMappedMessage(L.twofaTokenValid)])},T.postSocialDataController=function(e,o,t,i,n,a){e?(i+="?access_token="+e,n&&(i=i+"&"+n),k.util.ajaxCall("post",LoginRadiusDefaults.socialApiDomain+i,a,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"socialAPI")):t([C.setMappedMessage(L.twofaTokenValid)])},T.createCustomObjectController=function(e,o,t,i){e?k.util.ajaxCall("post",LoginRadiusDefaults.apiDomain+"/auth/customobject?apiKey="+k.options.apiKey+"&access_token="+e+"&objectname="+k.options.customObjectName,o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e)},"createCustomObject"):i([C.setMappedMessage(L.twofaTokenValid)])},T.getCustomObjectByIdController=function(e,o,t,i){n("get",e,o,t,i)},T.getCustomObjectsController=function(e,o,t){e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/customobject?apiKey="+k.options.apiKey+"&access_token="+e+"&objectname="+k.options.customObjectName,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"getCustomObject"):t([C.setMappedMessage(L.twofaTokenValid)])},T.updateCustomObjectController=function(e,o,t,i,n,a){if(e){var r="";i&&(r="&updatetype="+i),k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/customobject/"+o+"?apiKey="+k.options.apiKey+"&access_token="+e+"&objectname="+k.options.customObjectName+r,t,function(e){e.ErrorCode?a(C.loginRadiusErrorTojsError(e)):n(e)},"updateCustomObject")}else a([C.setMappedMessage(L.twofaTokenValid)])},T.deleteCustomObjectController=function(e,o,t,i){n("delete",e,o,t,i)},T.updateData=function(o,u,d,p,m,g,f,e,t){var h=o.Profile||o.Data,v=d;k.lrApiFramework||(v=C.mapRegistrationSchema(f,d,h));var y=o.access_token;t=t||k.setHostedToken,e=e||"updateData",k.options.verificationEmailTemplate=k.options.emailTemplate||k.options.verificationEmailTemplate,0<Object.keys(v).length?k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/account?apiKey="+k.options.apiKey+"&access_token="+y+"&verificationUrl="+k.options.verificationUrl+"&emailTemplate="+k.options.verificationEmailTemplate,v,function(c){if(c.ErrorCode)m(C.loginRadiusErrorTojsError(c));else{function e(e){var o,t;o=v.emailid||v.email,t=v.phone||v.phoneid;var i=k.util.findInSchema(f,"name","phoneid"),n=i&&-1!==i.rules.indexOf("required"),a=k.util.findInSchema(f,"name","emailid"),r=a&&-1!==a.rules.indexOf("required");k.storage.setBrowserStorage(LoginRadiusDefaults.storedUidName,h.Uid);var s,l=k.util.parseQueryString(window.location.search.replace("?",""));if((void 0===t||t)&&h.PhoneIdVerified&&void 0===o||(void 0===o||o)&&h.EmailVerified&&void 0===t||(t&&!n||void 0===t)&&(k.options.disabledEmailVerification||k.options.optionalEmailVerification))o&&!h.EmailVerified&&l.return_url&&-1!==l.return_url.toLowerCase().indexOf("/saml/")?m([C.setMappedMessage(L.emailNotVerified)]):(delete c.IsPosted,c.access_token=y,e(),LoginRadiusDefaults.isSSOInitFired&&C.setToken(y));else if(t&&h&&!h.PhoneIdVerified){(s=new SetLoginRadiusCommonFunctions(k)).verifyOTP(d,u,p,m,g),s.resendOTP(d+"&noPhoneVerified=false",u,p,m,g)}else!o||!r||h.EmailVerified||k.options.disabledEmailVerification||k.options.optionalEmailVerification?e():m([C.setMappedMessage(L.emailNotVerified)])}e(t?function(){o.Data=o.Profile,delete o.Profile,c.Data&&(o.Data=c.Data),C.loginHandleToken(o,d,p,m)}:function(){c.Data&&(c.Profile=c.Data,delete c.Data,delete c.IsPosted),c.access_token?C.loginHandleToken(c,d,p,m):p(c,k.util.parseQueryString(d))})}},e):C.loginHandleToken(o,d,p,m)},T.oneTouchLoginController=function(e,r,o,t,s,i){function n(t,e,i,o,n,a){C.createForm(k.registrationFormSchema,"loginRequiredFieldsUpdate",r,function(e){var o={};o.Profile=t,o.access_token=i,T.updateData(o,r,e,n,a,s,k.registrationFormSchema,"login",!0)},function(e){a(C.setMappedMessage(e))})}var a=k.util.checkPhoneOrEmailLogin(e),l=k.util.parseQueryString(a),c=i?"POST":"GET",u="";if(l.phone){var d=LoginRadiusDefaults.apiDomain+"/auth/onetouchlogin/phone?apikey="+k.options.apiKey+"&smstemplate="+k.options.smsTemplateOneTouchLogin;i?u=Object.assign({},l):d=d+"&"+a,k.util.ajaxCall(c,d,u,function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):(C.verifyOTP(a+"&onetouchloginflag=true",r,o,t,s,"",n),C.resendOTP(a+"&onetouchloginflag=true",r,o,t,s,"",n))},"oneTouchLogin")}else{var p=k.util.randomString(16),m=k.options.noRegistrationEmailTemplate||k.options.onetouchLoginEmailTemplate,g=LoginRadiusDefaults.apiDomain+"/auth/onetouchlogin/email?apikey="+k.options.apiKey+"&onetouchloginemailtemplate="+m+"&welcomeemailtemplate="+k.options.welcomeEmailTemplate+"&redirectUrl="+k.options.onetouchLoginRedirectUrl;i?u=Object.assign({},l,{clientGuid:p}):g=g+"&"+a+"&clientGuid="+p,k.util.ajaxCall(c,g,u,function(e){if(e.ErrorCode)t(C.loginRadiusErrorTojsError(e));else if(e.IsPosted){o(e);C.pingForSmartLogin(p,function(e){k.options.askRequiredFieldsOnPasswordLessLogin?(LoginRadiusDefaults.autoFilledFieldforPasswordLesLogin=!0,T.handleFeatures(e,a,n,"",o,t)):C.loginHandleToken(e,"",o,t,"",!0)},t)}},"oneTouchLogin")}},T.smartLoginController=function(e,o,t){var i=k.util.randomString(16),n=k.options.autoLoginRedirectUrl||k.options.smartLoginRedirectUrl,a=k.options.autoLoginEmailTemplate||k.options.smartLoginEmailTemplate;k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/smartlogin?apikey="+k.options.apiKey+"&"+e+"&clientGuid="+i+"&smartloginemailtemplate="+a+"&welcomeemailtemplate="+k.options.welcomeEmailTemplate+"&redirectUrl="+n,"",function(e){if(e.ErrorCode)t(C.loginRadiusErrorTojsError(e));else if(e.IsPosted){o(e);C.pingForSmartLogin(i,function(e){C.loginHandleToken(e,"",o,t)},t)}},"smartLogin")},T.verifyInstantOTP=function(o,e,t,i,n,a,r){var s="phone="+e.phone+"&"+o;k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/login/passwordlesslogin/otp/verify?apiKey="+k.options.apiKey+"&smsTemplate="+k.options.smsTemplateWelcome,s,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):C.loginHandleToken(e,o,t,i)},"login##otp")},T.socialLoginReceiveToken=function(p,m,g,f,h,v,e){k.currentLRContainer=m,k.options.verificationEmailTemplate=k.options.emailTemplate||k.options.verificationEmailTemplate,k.storage.setBrowserStorage(LoginRadiusDefaults.storedTokenName,p);var y,w;e=e&&0<e.length?e:k.options.RegistrationFormSchema,y=e,w=JSON.parse(JSON.stringify(y)),k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account?apiKey="+k.options.apiKey+"&access_token="+p+"&verificationUrl="+k.options.verificationUrl+"&emailTemplate="+k.options.verificationEmailTemplate,"",function(e){if(e.ErrorCode)f(C.loginRadiusErrorTojsError(e));else if(k.LRCheckLogin=!0,e.IsDeleted)f([C.setMappedMessage(L.blockedUser)]);else{var o={};o.Profile=e,o.access_token=p,C.setPasswordRule(k.util.findInSchema(w,"name","password")),C.setPasswordRule(k.util.findInSchema(w,"name","confirmpassword"));var t=!1;k.options.autoFilledFieldForSocial&&(t=!0,k.$hooks.register("beforeFormRender",function(e,o){if("socialRegistration"===e){var t=k.util.findInSchema(o,"name","emailid");t&&t.value&&(t.disabled=!0);var i=k.util.findInSchema(o,"name","phoneid");i&&i.value&&(i.disabled=!0)}})),k.registrationFormSchema=C.mapSchema(w,e,t),k.$hooks.call("registrationSchemaFilter",w,e);var i=k.storage.getBrowserStorage("LRTraditionalLogin");if(k.storage.removeBrowserStorage("LRTraditionalLogin"),0<k.registrationFormSchema.length&&!i)m?(k.$hooks.call("socialLoginFormRender"),C.createForm(k.registrationFormSchema,"socialRegistration",m,function(e){T.updateData(o,m,e,g,f,h,k.registrationFormSchema,"socialLogin")},function(e){f(e)},h)):v(p,k.registrationFormSchema,e);else{var n=k.util.findInSchema(y,"name","phoneid"),a=n&&-1!==n.rules.indexOf("required"),r=a?!!e.PhoneIdVerified:e.PhoneIdVerified,s=k.util.findInSchema(y,"name","emailid"),l=s&&-1!==s.rules.indexOf("required"),c=l?!!e.EmailVerified:e.EmailVerified;if((!r&&a||!c&&l)&&(!r&&a||!k.options.disabledEmailVerification&&!k.options.optionalEmailVerification))if(null==e.Email||e.EmailVerified){var u={phone:e.PhoneId};f([C.setMappedMessage(L.phoneNotVerified)],u);var d=h+LoginRadiusDefaults.idPrefix+"recaptcha_widget_verifyotp";T.resendOTPController(u,function(){k.socialLoginFlag=!0,C.verifyOTP("phone="+e.PhoneId,m,g,f,h),C.resendOTP("phone="+e.PhoneId+"&noPhoneVerified=false",m,g,f,h)},f,d,m,h)}else f([C.setMappedMessage(L.emailNotVerified)]);else k.storage.setBrowserStorage(LoginRadiusDefaults.storedUidName,e.Uid),LoginRadiusDefaults.isSSOInitFired&&C.setToken(p),C.loginHandleToken(o,"",g,f)}}},"socialLogin")},T.accountLinkingReceiveToken=function(o,t,i){k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/socialidentity?apiKey="+k.options.apiKey+"&access_token="+o,"",function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):e.Uid!==k.storage.getBrowserStorage(LoginRadiusDefaults.storedUidName)?k.util.ajaxCall("put",LoginRadiusDefaults.apiDomain+"/auth/socialidentity?apiKey="+k.options.apiKey+"&access_token="+k.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),"candidatetoken="+o,function(e){e.ErrorCode?i(C.loginRadiusErrorTojsError(e)):t(e)},"linkAccount"):t({IsPosted:!0})},"linkAccount")},T.validateToken=function(e,o,t){e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/access_token/Validate?apikey="+k.options.apiKey+"&access_token="+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"validateToken"):t([setMappedMessage(L.twofaTokenValid)])},T.invalidateToken=function(e,o,t){e?k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/access_token/InValidate?apikey="+k.options.apiKey+"&access_token="+e,"",function(e){e.ErrorCode?t(C.loginRadiusErrorTojsError(e)):o(e)},"invalidateToken"):t([setMappedMessage(L.twofaTokenValid)])},T.updatePrivacyPolicy=function(t,i,n,a,r,s,l){k.util.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/privacypolicy/accept?apikey="+k.options.apiKey+"&access_token="+t,"",function(e){var o;e.ErrorCode?a(C.loginRadiusErrorTojsError(e)):(r?o=e:((o=i.Data||{}).access_token=t,o.Profile=e,o.Profile=Object.assign({},o.Profile,{IsLatestPrivacyPolicy:!0})),o.Profile&&("email"===o.Profile.RegistrationProvider.toLowerCase()?C.loginHandleToken(o,"",n,a):new LoginRadiusControllers(k,C).socialLoginReceiveToken(t,s,n,a,l)))},"updatePrivacyPolicy")}}var LoginRadiusV2=function(t){this.global=window;var p=this,m=new SetLoginRadiusCommonFunctions(p),g=new LoginRadiusControllers(p,m),u=LoginRadiusDefaults.buttonNames,f=LoginRadiusDefaults.messages,d=LoginRadiusDefaults._uuidFormat,e=hash.get("lr-token");try{e&&window.opener&&window.opener.html5passToken&&(window.opener.html5passToken(e),document.write("<style type='text/css'>body { display: none !important; } </style>"),hash.remove("lr-token"),window.close())}catch(e){}var o=new LRNameSpace.Utilities;p.util=new LoginRadiusUtility(p,t),p.storage=new LRNameSpace.Storage(p,LoginRadiusDefaults);var h=p.util=Object.assign(o,p.util,p.storage);function v(e,o,t,i){e&&h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/login/passwordlesslogin/email/verify?apiKey="+p.options.apiKey+"&verificationtoken="+e+"&welcomeEmailTemplate="+p.options.welcomeEmailTemplate,"",function(e){e.ErrorCode?t(m.loginRadiusErrorTojsError(e)):m.loginHandleToken(e,"",o,t,i)},"passwordlessLogin")}function y(r,n,a,s){var e=h.getHashParam("vtoken"),o=h.getHashParam("vtype");p.currentLRContainer=r,"oneclicksignin"!==o&&"passwordlesslogin"!==o||p.passwordlessLoginFlag||(p.passwordlessLoginFlag=!0,v(e,n,a,s));var t=p.loginFormSchema;p.loginAction=!0,L(t),t=JSON.parse(JSON.stringify(function(e){if(p.options.stayLogin){for(var o=!0,t=0;t<e.length;t++)"stayLogin"===e[t].name&&(o=!1);if(o){e.push({type:"multi",name:"stayLogin",display:"Remember me",rules:null,permission:"w"})}}return e}(t))),m.setPasswordRule(t[1],p.loginAction),m.createForm(t,"login",r,function(i){if(p.LRCheckLogin=!0,window.lrpasswordlesslogin)m.sendInstantSignInLink(i,n,a,r,s);else if(window.lrpasswordlessloginotp)m.sendInstantSignInOtp(i,n,a,r,s);else{function e(t,e,i,o,n,a){m.createForm(p.registrationFormSchema,"loginRequiredFieldsUpdate",r,function(e){var o={};o.Profile=t,o.access_token=i,g.updateData(o,r,e,n,a,s,p.registrationFormSchema,"login",!0)},function(e){a(m.setMappedMessage(e))})}function o(o,t){m.createForm(p.changePasswordFormSchema,"changepassword",r,function(e){g.periodicalPasswordRestController(e,n,a,o,t,i)},function(e){a(e)})}p.options.twoFactorAuthentication||p.options.optionalTwoFactorAuthentication?g.login2FAController(i,r,n,a,s,o,e):g.loginController(i,r,n,a,o,e,s)}},function(e){a(m.setMappedMessage(e))},s)}function w(o,t,i,n,a){p.$hooks.call("registrationSchemaFilter",a);var r=n+LoginRadiusDefaults.idPrefix+"recaptcha_widget_registration";if(h.captchaSchema(r,a),p.options.privacyPolicyConfiguration.IsEnabled){var e=p.privacyPolicySchema.slice();e[0].rules="Strict"===p.options.privacyPolicyConfiguration.Mode?"required":"",a.push(e[0])}a.push({type:"html",name:"termsandcondition",html:p.options.termsAndConditionHtml||""}),m.setPasswordRule(h.findInSchema(a,"name","password")),m.setPasswordRule(h.findInSchema(a,"name","confirmpassword")),p.registrationFormSchema=a,m.createForm(a,"registration",o,function(e){g.registrationController(e,o,function(e,o){window.grecaptcha&&p.options.v2Recaptcha&&grecaptcha.reset(window[r+"lr_recaptcha_widgets_idprefix"]),t(e,o)},function(e){window.grecaptcha&&p.options.v2Recaptcha&&grecaptcha.reset(window[r+"lr_recaptcha_widgets_idprefix"]),i(e)},n,a)},function(e){window.grecaptcha&&p.options.v2Recaptcha&&grecaptcha.reset(window[r+"lr_recaptcha_widgets_idprefix"]),i(e)},n),h.renderV2Recaptcha(r,!0)}function k(t,i,n,e){var o=document.createElement("input");o.setAttribute("type","button");var a=p.buttonsName["createTwoFactorAuthentication".toLowerCase()]||u.createtwofactorauthentication;o.setAttribute("value",a);var r=e||LoginRadiusDefaults.classPrefix;document.getElementsByName(r+"profileeditor")[0]?p.options.showTwoFactorOnProfile&&document.getElementsByName(r+"profileeditor")[0].appendChild(o):(p.options.twoFactorAuthentication||p.options.optionalTwoFactorAuthentication)&&h.addHTMLContent(t,o);h.addEvent("click",o,function(e){p.options.optionalTwoFactorAuthentication||p.options.twoFactorAuthentication?h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/2FA?apikey="+p.options.apiKey+"&access_token="+p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),"",function(e){if(p.LRCheck2FA=!0,p.LRCheckLogin=!1,e.ErrorCode)n(m.loginRadiusErrorTojsError(e));else{p.storage.setBrowserStorage(LoginRadiusDefaults.storedOTPAuth,e.IsOTPAuthenticatorVerified),p.storage.setBrowserStorage(LoginRadiusDefaults.storedGAAuth,e.IsGoogleAuthenticatorVerified);var o=e.IsOTPAuthenticatorVerified;p.options.googleAuthentication&&(m.showQRCode(e,t,i,n,r),LoginRadiusDefaults.innerHTML=!0),o?m.changeNumberForm(t,"",i,n,r,LoginRadiusDefaults.innerHTML):m.updatePhoneNumber(t,i,n,r,"updatePhone2FA")}},"createTwoFactorAuthentication"):p.log("Two Factor Authentication will not work, please set in commonOpitons either twoFactorAuthentication or optionalTwoFactorAuthentication")})}function C(e,o){var t=[];if(p.options.SecurityQuestions){function i(e){var o=new RegExp("securityQuestion"),t=e.target.id.split("securityQuestion")[1];r[t]=e.target.selectedIndex;for(var i=h.findElementByRegex("id",o,"select"),n=0;n<i.length;n++)for(var a=1;a<i[n].options.length;a++)-1<r.indexOf(i[n].options[a].index)&&i[n].options[a].index!==i[n].options.selectedIndex?i[n].options[a].style.display="none":i[n].options[a].style.display="block"}for(var n=[],r=[],a=0;a<p.options.SecurityQuestions.length;a++){var s={};s.text=p.options.SecurityQuestions[a].Question,s.value=p.options.SecurityQuestions[a].QuestionId,n.push(s),r.push(0)}for(var l=0;l<p.options.securityQuestionsCount;l++){var c={type:"option"};c.options=n,c.name="securityQuestion"+l,c.display="Security Question",c.event="change",c.eventCallback=i,c.rules=o?"optional":"required",c.permission="r",o?e.push(c):t.push(c);var u={};p.options.maskSensitiveInput?u.type="password":u.type="string",u.name="securityAnswer"+l,u.display="Answer",u.rules=o?"optional":"required",u.permission="r",o?e.push(u):t.push(u)}}return t}function L(e){if(p.options.duplicateEmailWithUniqueUsername){var o=h.findInSchema(e,"name","emailid");o.display="Username",o.rules="required"}else{var t;p.options.usernameLogin&&-1===(t=h.findInSchema(e,"name","emailid")).display.indexOf("/Username")&&(t.display=t.display+"/Username",t.rules="required"),(p.options.phoneLogin||p.options.passwordlessLoginOTP)&&(t||((t=h.findInSchema(e,"name","emailid")).rules="required"),-1===t.display.indexOf("/Phone")&&(t.display=t.display+"/Phone"))}}function T(o,t,i,n){var e=h.getHashParam("vtoken"),a=h.getHashParam("vtype"),r=!1;p.options.v2Recaptcha||p.options.invisibleRecaptcha||p.options.tencentCaptcha||p.options.tencentCaptchaAsFallback?r=!0:p.options.privacyPolicyConfiguration.IsEnabled&&p.log("Captcha should be enabled for passwordless login if using with privacy policy"),"noregistration"!==a&&"onetouchlogin"!==a||function(e,o,t){e&&h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/email/autologin?apiKey="+p.options.apiKey+"&verificationtoken="+e+"&welcomeEmailTemplate="+p.options.welcomeEmailTemplate,"",function(e){e.ErrorCode?t(m.loginRadiusErrorTojsError(e)):m.loginHandleToken(e,"",o,t)},"smartlogin")}(e,t,i);var s,l=p.passwordLessLoginSchema;if(p.options.phoneLogin){var c=h.findInSchema(l,"name","emailid");c.display=c.display+"/Phone"}r&&(h.addRecaptchaJS(),s=n+LoginRadiusDefaults.idPrefix+o,h.captchaSchema(s,l)),m.createForm(l,"oneTouchLogin",o,function(e){g.oneTouchLoginController(e,o,t,i,n,r)},function(e){i(e)},n),r&&h.renderV2Recaptcha(s,!0)}function i(n,e){var a=(e=e||{}).onSuccess||function(){},r=e.onError||function(){},s=e.container||"",l=e.classPrefix||"",c=e.templateName||"";p.$hooks.register("getCurrentActionOptions",function(e){n==e&&(window.LRSafarionSuccess=a||function(){},window.LRSafarionError=r||function(){}),p.currentActionOptions={},p.currentActionOptions.onSuccess=a||function(){},p.currentActionOptions.onError=r||function(){},p.currentActionOptions.container=s,p.currentActionOptions.classPrefix=l||"",p.currentActionOptions.templateName=c||""}),p.getAppConfiguration(function(){switch("registration"!==n&&"updateSecurityQuestion"!==n&&p.$hooks.call("beforeInit",n),n){case"privacyPolicyUpdate":!function(o,t,i,n){if(p.options.privacyPolicyConfiguration.IsEnabled){var a=p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);if(a){var e=p.privacyPolicySchema.slice();e[0].rules="Strict"===p.options.privacyPolicyConfiguration.Mode?"required":"",m.createForm(e,"privacyPolicyUpdate",o,function(e){g.updatePrivacyPolicy(a,"",t,i,!0,o,n)},function(e){i(m.setMappedMessage(e))})}else i([m.setMappedMessage(f.tokenValid)])}}(s,a,r,l);break;case"login":y(s,a,r,l);break;case"registration":var e;e=setInterval(function(){LoginRadiusDefaults.isRegFormSchemaLock||(LoginRadiusDefaults.isRegFormSchemaLock=!0,p.$hooks.call("beforeInit",n),function(r,s,l,c){h.addRecaptchaJS(),p.registrationFormSchema=p.registrationFormSchema&&0<p.registrationFormSchema.length?p.registrationFormSchema:p.options.RegistrationFormSchema,function(e){for(var o=JSON.parse(JSON.stringify(e)),t=[],i=0;i<o.length;i++)if(o[i]&&p.options.showSplitForm&&o[i].DataSource&&null!==o[i].DataSource){var n=JSON.parse(JSON.stringify(o[i])),a=JSON.parse(JSON.stringify(h.findInSchema(o,"name","cf_"+o[i].DataSource+"Code")));n.name="recordid",a.name="code",t.push(n),t.push(a)}0<t.length&&p.options.showSplitForm?m.createForm(t,"validatecode",r,function(e){h.ajaxCall("post",LoginRadiusDefaults.apiDomain+"/auth/registrationdata/validatecode?apiKey="+p.options.apiKey,e,function(e){1==e.IsValid?w(r,s,l,c,o):l(e)},"registration")}):(p.options.securityQuestionEnabled&&p.options.SecurityQuestions&&C(o,!0),w(r,s,l,c,o))}(p.registrationFormSchema)}(s,a,r,l),clearInterval(e))},1e3);break;case"resetPassword":m.resetPassword(s,a,r,l);break;case"forgotPassword":!function(o,t,i,n){var e=p.forgotPasswordFormSchema;L(e),m.createForm(e,"forgotpassword",o,function(e){-1!==(e=h.checkPhoneOrEmailLogin(e)).indexOf("phoneApi=1")?(LoginRadiusDefaults.LRPhoneNo=e,g.forgotPasswordbyPhoneController(e,o,t,i,n)):g.forgotPasswordController(e,o,t,i,n)},function(e){i(e)},n)}(s,a,r,l);break;case"verifyEmail":!function(i,n,a,r){function o(e){var o=h.getHashParam("vtoken");if(p.options.verifyEmailByOTP){var t={};e&&(t=h.mergeOptions(t,h.parseQueryString(e))),t.otp=o;try{t.email=h.getQueryParameterByName("email").replace(/ /g,"+"),g.emailVerificationController(t,i,n,a,r,!0)}catch(e){p.log(e)}}else g.emailVerificationController(o,i,n,a,r)}if(a&&"Captcha"===p.options.loginLockedType){p.$hooks.register("afterFormRender",function(e,o,t,i){i&&"loginradius-verifyemail"===i.name&&"loginradius-submit-verify"===i[0].id&&(i[0].style.display="none")}),m.createForm([],"verifyemail",a,function(e){o(e)},function(e){n(e)},r)}o()}(a,r,s,l);break;case"changePassword":!function(e,o,t,i){var n=p.changePasswordFormSchema;m.setPasswordRule(h.findInSchema(n,"name","newpassword")),m.setPasswordRule(h.findInSchema(n,"name","confirmnewpassword")),m.createForm(n,"changepassword",e,function(e){g.changePasswordController(e,o,t)},function(e){t(e)},i)}(s,a,r,l);break;case"socialLogin":var o=h.elementById(s);o&&h.addEvent("click",o,function(){LoginRadiusDefaults.socialRegFormId=this.id}),LoginRadiusDefaults.socialRegFormId=s,m.socialLogin(s,a,r,l);break;case"linkAccount":!function(n,a,r,s){if(p.options.disableAccountLinking)p.log(f.disabledAccountLinking);else{var l=n.split(","),e=p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);e?h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account?apiKey="+p.options.apiKey+"&access_token="+e,"",function(e){if(e.ErrorCode)r(m.loginRadiusErrorTojsError(e));else if(e.EmailVerified||e.PhoneIdVerified){var o={};if(e.Identities)for(var t=0,i=e.Identities.length;t<i;t++)o[e.Identities[t].Provider]=e.Identities[t].ID;1===l.length?m.renderCustomInterface(n,o,s,"",!0):m.renderCustomInterface(n,o,p.options.linkedAccountsTemplate+","+p.options.notLinkedAccountsTemplate,!0,!0),window.html5passToken=function(e){g.accountLinkingReceiveToken(e,a,r)},p.options.isMobile||p.options.noCallbackForSocialLogin?p.$hooks.register("socialCalls",function(e,o){if(p.options.noCallbackForSocialLogin){m.pingForSmartLogin(o,function(e){e.access_token?g.accountLinkingReceiveToken(e.access_token,a,r):a(e)},function(){})}}):h.addEvent("message",window,function(e){-1===e.origin.indexOf(p.options.customDomain)&&-1===e.origin.indexOf(LoginRadiusDefaults.hubDomain)||"string"==typeof e.data&&d.test(e.data)&&g.accountLinkingReceiveToken(e.data,a,r)})}else r([m.setMappedMessage(f.unverifiedUser)])},"linkAccount"):r([m.setMappedMessage(f.tokenValid)])}}(s,a,r,c);break;case"unLinkAccount":var t=h.unLinkAccount;h.unLinkAccount=function(e,o){t(e,o,a,r)};break;case"profileEditor":!function(s,l,c,u){var d=p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);if(d){function n(r){h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account?apiKey="+p.options.apiKey+"&access_token="+d,"",function(e){var o=JSON.parse(JSON.stringify(r));o=m.mapSchema(o,e,"profileeditor");var t=[],i=[],n={};n.Profile=e,n.access_token=d;for(var a=0;a<o.length;a++)o[a].name&&-1===o[a].name.indexOf("emailid")&&-1===o[a].name.indexOf("phoneid")&&t.push(o[a]),o[a].permission&&"h"!==o[a].permission&&i.push(o[a]);m.createForm(t,"profileeditor",s,function(e){g.updateData(n,s,e,l,c,u,t,"profileEditor")},function(e){c(e)},u),(p.options.optionalTwoFactorAuthentication||p.options.twoFactorAuthentication)&&k(s,l,c,u),p.$hooks.call("renderProfileEditorHook",e,i)},"profileEditor")}p.registrationFormSchema=p.registrationFormSchema&&0<p.registrationFormSchema.length?p.registrationFormSchema:p.options.RegistrationFormSchema,p.progressiveProfiling.showInEditor?p.progressiveProfiling.fetchSchema(function(e){var o=p.registrationFormSchema.slice();if(e&&e.ProfilingSteps){for(var t=[],i=0;i<e.ProfilingSteps.length;i++)t=t.concat(e.ProfilingSteps[i].Schema);o=o.concat(t)}n(o)}):n(p.registrationFormSchema)}else c([m.setMappedMessage(f.tokenValid)])}(s,a,r,l);break;case"deleteUser":!function(o,t){var e=p.sessionData.getToken();e?h.ajaxCall("delete",LoginRadiusDefaults.apiDomain+"/auth/account?apiKey="+p.options.apiKey+"&access_token="+e+"&deleteUrl="+p.options.deleteUrl+"&emailTemplate="+p.options.deleteUserEmailTemplate,{},function(e){e.ErrorCode?t(m.loginRadiusErrorTojsError(e)):o(e)},"deleteUser"):t([f.vTokenError])}(a,r);break;case"deleteUserConfirm":!function(e,o){var t=h.getHashParam("vtoken");g.deleteUserConfirmController(t,e,o)}(a,r);break;case"updatePhone":p.LRCheck2FA=!1,m.updatePhoneNumber(s,a,r,l);break;case"changeUsername":!function(e,o,t,i){m.createForm(p.changeUsernameFormSchema,"changeUsername",e,function(e){g.changeUsernameController(e,o,t)},function(e){t(e)},i)}(s,a,r,l);break;case"resendVerificationEmail":!function(e,o,t,i){m.createForm(p.emailSchema,"resendEmailVerification",e,function(e){g.resendEmailVerificationController(e,o,t)},function(e){t(e)},i)}(s,a,r,l);break;case"addEmail":!function(e,o,t,i){m.createForm(p.addEmailSchema,"addemail",e,function(e){g.addEmailController(e,o,t)},function(e){t(e)},i)}(s,a,r,l);break;case"removeEmail":!function(e,o,t,i){m.createForm(p.emailSchema,"removeemail",e,function(e){g.removeEmailController(e,o,t)},function(e){t(e)},i)}(s,a,r,l);break;case"createTwoFactorAuthentication":k(s,a,r,l);break;case"backupCodeButton":!function(i,n,a){h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/2FA?apikey="+p.options.apiKey+"&access_token="+p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),"",function(e){if(e.IsOTPAuthenticatorVerified||e.IsGoogleAuthenticatorVerified){var o=document.createElement("input");o.setAttribute("type","button");var t=p.buttonsName["backupCode".toLowerCase()]||u.backupCode;o.setAttribute("value",t),h.addHTMLContent(i,o),h.addEvent("click",o,function(e){p.api.getBackupCode(p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),n,a)})}})}(s,a,r);break;case"resetBackupCodeButton":!function(i,n,a){h.ajaxCall("get",LoginRadiusDefaults.apiDomain+"/auth/account/2FA?apikey="+p.options.apiKey+"&access_token="+p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),"",function(e){if(e.IsOTPAuthenticatorVerified||e.IsGoogleAuthenticatorVerified){var o=document.createElement("input");o.setAttribute("type","button");var t=p.buttonsName["resetBackupCode".toLowerCase()]||u.resetBackupCode;o.setAttribute("value",t),h.addHTMLContent(i,o),h.addEvent("click",o,function(e){p.api.resetBackupCode(p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName),n,a)})}})}(s,a,r);break;case"updateSecurityQuestion":var i;i=setInterval(function(){LoginRadiusDefaults.isSecurityFormSchemaLock||(LoginRadiusDefaults.isSecurityFormSchemaLock=!0,function(e,o,t,i){var n,a,r;p.options.securityQuestionEnabled&&(p.registrationFormSchema=p.registrationFormSchema&&0<p.registrationFormSchema.length?p.registrationFormSchema:p.options.RegistrationFormSchema,n=p.registrationFormSchema,a=!0,0<(r=C(n)).length&&(a=!1),a?t([m.setMappedMessage(f.noSecurityQuestions)]):m.createForm(r,"updatesecurityquestion",e,function(e){g.updateSecurityQuestionController(e,o,t)},function(e){t(e)},i))}(s,a,r,l),clearInterval(i))},1e3);break;case"resetPasswordBySecurityQuestion":!function(i,n,a,r){if(p.options.securityQuestionEnabled){var e,s=!0;L(e=p.getSecQSchema),m.createForm(e,"securityquestions",i,function(e){e=h.checkPhoneOrEmailLogin(e),g.getSecurityQuestionsController(e,function(e){0<e.length&&(s=!1);var o=p.loginFormSchema.slice();m.setPasswordRule(p.util.findInSchema(o,"name","password")),m.setPasswordRule(p.util.findInSchema(o,"name","confirmpassword"));var t=h.mergeObjects(o,e);p.loginAction||L(t),s?a([m.setMappedMessage(f.noSecurityQuestions)]):m.createForm(t,"resetpwdbysecq",i,function(e){e=h.checkPhoneOrEmailLogin(e),g.resetPasswordBySecurityQuestionController(e,n,a)},function(e){a(e)},r)},function(e){a(e)})},function(e){a(e)},r)}}(s,a,r,l);break;case"autoLogin":case"smartLogin":!function(t,i,n,a){var e=p.smartLoginSchema;L(e),m.createForm(e,"smartlogin",t,function(e){var o=h.checkPhoneOrEmailLogin(e);-1!==o.indexOf("phone")?g.loginOTPController(o,t,i,n,a):g.smartLoginController(o,i,n)},function(e){n(e)},a)}(s,a,r,l);break;case"noRegistrationPasswordLessLogin":case"onetouchLogin":T(s,a,r,l);break;case"ssoLogin":!function(t){m.validateAndCall(function(){var e=p.options.customDomain||p.options.appName+"."+LoginRadiusDefaults.hubDomain;h.jsonpCall("https://"+e+"/ssologin/login",function(o){if(o.isauthenticated)if(p.loginRadiusHtml5PassToken)p.loginRadiusHtml5PassToken(o.token);else if(p.storage.setBrowserStorage(LoginRadiusDefaults.storedTokenName,o.token),p.options.tokenType&&"jwt"===p.options.tokenType.toLowerCase()){LoginRadiusDefaults.lrResponseCounter++,LoginRadiusDefaults.lrCounterTokenResponse={};m.getJwtToken(o.token,function(e){t(o.token,e)})}else t(o.token)},"ssoLogin")})}(a);break;case"logout":m.logout(a);break;case"ssoNotLoginThenLogout":!function(t,i){m.validateAndCall(function(){var e=p.options.customDomain||p.options.appName+"."+LoginRadiusDefaults.hubDomain;h.jsonpCall("https://"+e+"/ssologin/login",function(o){if(o.isauthenticated){var e=LRNameSpace.cookies.getItem(LoginRadiusDefaults.tokenCookie);if(void 0!==e&&null!=e||(m.setToken(o.token),e=LRNameSpace.cookies.getItem(LoginRadiusDefaults.tokenCookie)),e&&e!==o.token)m.setToken(o.token),i(o.token);else if(p.storage.setBrowserStorage(LoginRadiusDefaults.storedTokenName,o.token),p.options.tokenType&&"jwt"===p.options.tokenType.toLowerCase()){LoginRadiusDefaults.lrResponseCounter++,LoginRadiusDefaults.lrCounterTokenResponse={};m.getJwtToken(o.token,function(e){i(o.token,e)})}else i(o.token)}else LRNameSpace.cookies.removeItem(LoginRadiusDefaults.tokenCookie,p.options.appPath),t()},"ssoNotLoginThenLogout")})}(r,a);break;case"instantLinkLogin":case"passwordlessLoginValidate":!function(e,o,t){var i=h.getHashParam("vtoken"),n=h.getHashParam("vtype");"oneclicksignin"!==n&&"passwordlesslogin"!==n||p.passwordlessLoginFlag||(p.passwordlessLoginFlag=!0,v(i,e,o,t))}(a,r,l);break;default:p.log("This action is not valid.")}})}return this.trackEvent=function(o,t,i){p.getAppConfiguration(function(){if(p.options.anonymousLogin){var e=p.storage.getBrowserStorage(LoginRadiusDefaults.storedUidName);p.anonymous.track(o,e,t,i)}else p.log("Anonymous login feature is not enabled.")})},h.unLinkAccount=function(e,o,t,i){if(t=t||function(){},i=i||function(){},e&&o){var n={provider:e,providerid:o},a=p.storage.getBrowserStorage(LoginRadiusDefaults.storedTokenName);a?h.ajaxCall("delete",LoginRadiusDefaults.apiDomain+"/auth/socialIdentity?apiKey="+p.options.apiKey+"&access_token="+a,n,function(e){e.ErrorCode?i(m.loginRadiusErrorTojsError(e)):t(e,n)},"unLinkAccount"):i([m.setMappedMessage(f.tokenValid)])}},LoginRadiusHooksModel(p),setLoginRadiusModuleFunctions(p,t),p.init=function(e,o){p.useraction=e,t.maskSensitiveInput?p.otpSchema=[{type:"password",name:"otp",display:"OTP",rules:"required",permission:"r"}]:p.otpSchema=[{type:"string",name:"otp",display:"OTP",rules:"required",permission:"r"}],"required"===t.twoFactorAuthentication?(t.twoFactorAuthentication=!0,t.optionalTwoFactorAuthentication=!1):"optional"===t.twoFactorAuthentication&&(t.twoFactorAuthentication=!1,t.optionalTwoFactorAuthentication=!0),"ssoLogin"!==e&&"logout"!==e&&"ssoNotLoginThenLogout"!==e||LoginRadiusDefaults.isSSOInitFired||(LoginRadiusDefaults.isSSOInitFired=!0,p.SSOinitFired=!0),t.appName||p.log("SSO will not work, please set option.appName for SSO"),t.formRenderDelay=t.formRenderDelay||0,t.apiKey?0<t.formRenderDelay?setTimeout(function(){i(e,o)},t.formRenderDelay):i(e,o):p.log("API key must be set.")},setLoginRadiusDefaultSchema(p),p.api=new LoginRadiusApiFramework(p,g),p};
//# sourceMappingURL=data:application/json;charset=utf8;base64,
